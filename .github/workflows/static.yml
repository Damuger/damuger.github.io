<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>狼人杀笔记小程序</title>
    <!-- 引入Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- 引入Font Awesome -->
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    
    <!-- 配置Tailwind自定义颜色和字体 - 日间暖色，夜间冷色 -->
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        // 基础暖色（日间模式）
                        warm: {
                            50: '#FFFBEB',
                            100: '#FEF3C7',
                            200: '#FDE68A',
                            300: '#FCD34D',
                            400: '#FBBF24',
                            500: '#F59E0B',
                            600: '#D97706',
                            700: '#B45309',
                            800: '#92400E',
                            900: '#78350F',
                        },
                        
                        // 基础冷色（夜间模式）
                        cool: {
                            50: '#ECFDF5',
                            100: '#D1FAE5',
                            200: '#A7F3D0',
                            300: '#6EE7B7',
                            400: '#34D399',
                            500: '#10B981',
                            600: '#059669',
                            700: '#047857',
                            800: '#065F46',
                            900: '#064E3B',
                        },
                        
                        // 阵营颜色 - 日间暖色，夜间冷色
                        'town': '#1E40AF',       // 神民阵营-深蓝色（冷色，夜间主色）
                        'town-warm': '#B45309',  // 神民阵营-深橙色（暖色，日间主色）
                        'wolf': '#DC2626',      // 狼人阵营-深红色（暖色，日间主色）
                        'wolf-cool': '#7C2D12', // 狼人阵营-深棕红色（冷色，夜间主色）
                        'third': '#7C3AED',     // 三方阵营-深紫色（冷色，夜间主色）
                        'third-warm': '#C2410C',// 三方阵营-深琥珀色（暖色，日间主色）
                        
                        // 身份牌颜色（同色系但有区分）
                        // 日间暖色系列
                        'town-warm-1': '#D97706',
                        'town-warm-2': '#F59E0B',
                        'town-warm-3': '#FBBF24',
                        'town-warm-4': '#FDE68A',
                        'town-warm-5': '#B45309',
                        'town-warm-6': '#D97706',
                        'town-warm-7': '#F59E0B',
                        'town-warm-8': '#FBBF24',

                        'wolf-warm-1': '#DC2626',
                        'wolf-warm-2': '#EF4444',
                        'wolf-warm-3': '#F87171',
                        'wolf-warm-4': '#FCA5A5',
                        
                        'third-warm-1': '#C2410C',
                        'third-warm-2': '#D97706',
                        'third-warm-3': '#F59E0B',
                        'third-warm-4': '#FBBF24',
                        
                        // 夜间冷色系列
                        'town-cool-1': '#1E40AF',
                        'town-cool-2': '#3B82F6',
                        'town-cool-3': '#60A5FA',
                        'town-cool-4': '#93C5FD',
                        'town-cool-5': '#0369A1',
                        'town-cool-6': '#0EA5E9',
                        'town-cool-7': '#38BDF8',
                        'town-cool-8': '#7DD3FC',
                        
                        'wolf-cool-1': '#7C2D12',
                        'wolf-cool-2': '#9A3412',
                        'wolf-cool-3': '#B45309',
                        'wolf-cool-4': '#D97706',
                        
                        'third-cool-1': '#7C3AED',
                        'third-cool-2': '#8B5CF6',
                        'third-cool-3': '#A78BFA',
                        'third-cool-4': '#C4B5FD',
                        
                        
                        // 特殊身份颜色
                        'gold': '#D4AF37',      // 金水-金色（通用）
                        'silver': '#C0C0C0',    // 银水-银色（通用）
                        'copper': '#B87333',    // 铜水-铜色（通用）
                        'badge-warm': '#D97706', // 警徽流-暖橙色
                        'badge-cool': '#0EA5E9', // 警徽流-冷蓝色
                        
                        // 日夜模式背景色
                        'day-bg': '#FFFBEB',    // 白天背景-极浅暖黄
                        'day-card': '#FFFFFF',  // 白天卡片背景-白色
                        'day-accent': '#FDE68A', // 白天强调色-浅黄
                        'night-bg': '#0F172A',  // 夜晚背景-深蓝灰
                        'night-card': '#1E293B', // 夜晚卡片背景-深灰蓝
                        'night-card-light': '#334155', // 夜晚浅色卡片背景
                        'night-accent': '#334155', // 夜晚强调色-中灰蓝
                    },
                    fontFamily: {
                        sans: ['Inter', 'system-ui', 'sans-serif'],
                    },
                    boxShadow: {
                        'warm': '0 4px 6px -1px rgba(217, 119, 6, 0.1), 0 2px 4px -1px rgba(217, 119, 6, 0.06)',
                        'cool': '0 4px 6px -1px rgba(14, 165, 233, 0.1), 0 2px 4px -1px rgba(14, 165, 233, 0.06)',
                        'warm-lg': '0 10px 15px -3px rgba(217, 119, 6, 0.1), 0 4px 6px -2px rgba(217, 119, 6, 0.05)',
                        'cool-lg': '0 10px 15px -3px rgba(14, 165, 233, 0.1), 0 4px 6px -2px rgba(14, 165, 233, 0.05)',
                    }
                }
            }
        }
    </script>
    
    <!-- 自定义工具类 -->
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .player-card {
                @apply bg-day-card dark:bg-night-card rounded-xl shadow-warm dark:shadow-cool overflow-hidden transition-all duration-300 hover:shadow-warm-lg dark:hover:shadow-cool-lg transform hover:-translate-y-1;
            }
            .number-badge {
                @apply w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg shadow-md dark:shadow-gray-700 transition-all duration-300;
                @apply text-warm-800 dark:text-white;
            }
            .btn-action {
                @apply p-2 rounded-full hover:bg-day-accent dark:hover:bg-night-accent transition-colors duration-200;
            }
            .phase-btn {
                @apply px-3 py-1 rounded-md text-sm font-medium transition-all duration-200;
            }
            .page {
                @apply hidden;
            }
            .page.active {
                @apply block;
            }
            .partition {
                @apply bg-day-card/80 dark:bg-night-card/80 rounded-xl p-4 mb-6 backdrop-blur-sm border border-warm-200 dark:border-cool-800;
            }
            .voting-indicator {
                @apply absolute -top-1 -right-1 bg-day-accent dark:bg-night-accent text-xs w-5 h-5 rounded-full flex items-center justify-center transition-all duration-300;
            }
            /* 迷你玩家号码牌样式 */
        /* 迷你玩家号码牌 - 优化数字排列 */
        .mini-player-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            font-size: 12px;
            font-weight: bold;
            margin: 0 2px;
            background-color: var(--warm-200);
            color: var(--warm-800);
            position: relative;
            overflow: visible;
            box-sizing: border-box;
            line-height: 1;
        }
        
        .dark .mini-player-badge {
            background-color: var(--cool-700);
            color: var(--cool-200);
        }
        
        /* 玩家选择徽章样式 - 增强勾选反馈 */
        .selectable-player-badge {
            box-sizing: border-box;
            position: relative;
        }
        
        .selectable-player-badge .player-number {
            position: relative;
            z-index: 1;
            transition: opacity 0.2s ease;
        }
        
        .selectable-player-badge .selected-icon {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 14px;
            font-weight: bold;
            z-index: 2;
            transition: all 0.2s ease;
        }
        
        /* 操作标签样式 */
        .action-tag {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            padding: 6px 10px;
            border-radius: 6px;
            margin: 4px 0;
            cursor: pointer;
            transition: all 0.2s;
            width: 100%;
            box-sizing: border-box;
            background-color: rgba(243, 244, 246, 0.8);
            border: 1px solid var(--warm-100);
        }
        
        .dark .action-tag {
            background-color: rgba(30, 41, 59, 0.8);
            border: 1px solid var(--cool-800);
        }
        
        .action-tag .action-label {
            font-weight: bold;
            margin-right: 6px;
            white-space: nowrap;
        }
        
        /* 优化玩家号码牌容器 - 确保数字整齐排列 */
        .action-tag .player-badges {
            flex: 1;
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            min-width: 0;
            overflow: hidden;
            justify-content: flex-start;
            align-items: center;
        }
        
        .action-tag .toggle-btn {
            margin-left: 6px;
            font-size: 10px;
            transition: transform 0.2s;
            padding: 2px;
            border-radius: 3px;
        }
        
        .action-tag:hover .toggle-btn {
            background-color: rgba(0, 0, 0, 0.1);
        }
        
        .dark .action-tag:hover .toggle-btn {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .action-tag.collapsed .player-badges {
            display: none;
        }
        
        .action-tag.collapsed .toggle-btn {
            transform: rotate(-90deg);
        }
        
        /* 不同操作的颜色 */
        .踩-tag {
            background-color: rgba(239, 68, 68, 0.1);
            border-left: 3px solid rgb(239, 68, 68);
        }
        
        .保-tag {
            background-color: rgba(16, 185, 129, 0.1);
            border-left: 3px solid rgb(16, 185, 129);
        }
        
        .提及-tag {
            background-color: rgba(59, 130, 246, 0.1);
            border-left: 3px solid rgb(59, 130, 246);
        }
        
        .忽视-tag {
            background-color: rgba(107, 114, 128, 0.1);
            border-left: 3px solid rgb(107, 114, 128);
        }
        
        /* 可选择的玩家号码牌 */
        .selectable-player-badge {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        /* 玩家选择徽章选中状态样式 - 增加与其数字颜色相同的边框 */
        .selectable-badge.selected {
            box-shadow: 0 0 0 3px var(--warm-500), 0 0 0 6px currentColor;
            border: 3px solid currentColor;
            transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
        }
        
        .dark .selectable-badge.selected {
            box-shadow: 0 0 0 3px var(--cool-500), 0 0 0 6px currentColor;
            border: 3px solid currentColor;
        }
        
        /* 为投票、踩、保、提及、忽视等功能的批量选择模态框中的选中效果添加边框 */
        .number-badge.selectable-badge.selected {
            box-shadow: 0 0 0 3px var(--warm-500), 0 0 0 6px currentColor;
            border: 3px solid currentColor;
        }
        
        .dark .number-badge.selectable-badge.selected {
            box-shadow: 0 0 0 3px var(--cool-500), 0 0 0 6px currentColor;
            border: 3px solid currentColor;
        }
            .group-header {
                @apply p-3 cursor-pointer flex items-center justify-between hover:bg-warm-100 dark:hover:bg-cool-800 transition-colors;
            }
            .group-content {
                @apply p-0 overflow-hidden transition-all duration-300 max-h-0;
            }
            .group-content.open {
                @apply p-3 max-h-[500px];
            }
            .sub-item {
                @apply p-2 mb-2 rounded bg-warm-100 dark:bg-cool-800 last:mb-0 relative;
            }
            .warm-icon {
                @apply text-warm-600 dark:text-cool-400;
            }
            .warm-btn {
                @apply bg-warm-100 hover:bg-warm-200 text-warm-800 dark:bg-cool-800 dark:hover:bg-cool-700 dark:text-cool-200 transition-colors;
            }
            .primary-btn {
                @apply bg-warm-500 hover:bg-warm-600 dark:bg-cool-500 dark:hover:bg-cool-600 transition-colors;
            }
        }
    </style>

    <style>
        @media (max-width: 640px) {
            header .container {
                padding-left: 0.2rem;
                padding-right: 0.2rem;
            }
            .number-badge {
                width: 2rem;
                height: 2rem;
                font-size: 0.9rem;
                font-weight: bold;
            }
            .btn-action {
                padding: 0.3rem;
            }
            .warm-btn {
                font-size: 0.65rem;
                padding: 0.2rem 0;
            }
            #multiSelectModal, #playerDetailModal {
                padding: 0.2rem;
                font-size: 0.7rem;
                max-width: 90vw;
                max-height: 85vh;
            }
            .phase-btn {
                padding: 0.25rem 0.35rem;
                font-size: 0.65rem;
            }
            #currentPhase {
                min-width: 60px;
                padding: 0.25rem 0.35rem;
                font-size: 0.65rem;
            }
            .player-card {
                margin-bottom: 0.3rem;
            }
            .player-card .p-4 {
                padding: 0.5rem;
            }
            nav button {
                padding: 0.25rem 0;
            }
            nav i {
                font-size: 1rem;
            }
            nav span {
                display: none;
            }
            .partition h3 {
                margin-bottom: 0.5rem;
                font-size: 0.75rem;
            }
            textarea#globalNotes {
                height: 10rem;
                font-size: 0.65rem;
                line-height: 1.4;
            }
            #speechesList, #votesList, #interactionsList {
                max-height: calc(100vh - 280px);
            }
            .small-textarea {
                font-size: 0.65rem;
                line-height: 1.4;
            }
            #speechesTab .flex, #votesTab .flex, #interactionsTab .flex {
                flex-direction: row;
                flex-wrap: nowrap;
                align-items: center;
                gap: 0.2rem;
            }
            #speechesTab .flex h3, #votesTab .flex h3, #interactionsTab .flex h3 {
                min-width: auto;
                margin-bottom: 0;
                margin-right: 0.1rem;
                font-size: 0.65rem;
            }
            #speechesTab .flex div, #votesTab .flex div, #interactionsTab .flex div {
                flex: 1;
                display: flex;
                gap: 0.2rem;
            }
            #speechFilterPhase, #speechFilterPlayer, #voteFilterPhase, #voteFilterVoter, #interactionFilterType, #interactionFilterSource {
                font-size: 0.65rem;
                flex: 1;
                padding: 0.15rem;
            }
            select {
                font-size: 0.65rem;
                padding: 0.15rem;
                min-width: auto;
            }
            input, textarea {
                font-size: 0.65rem;
                padding: 0.2rem;
            }
            .partition-mode-btn {
                padding: 0.25rem 0.35rem;
                font-size: 0.65rem;
                margin: 0 0.05rem 0.05rem 0;
            }
            #speechForm select, #speechForm input, #speechForm textarea {
                font-size: 0.65rem;
                padding: 0.15rem;
            }
            #speechForm .flex {
                flex-direction: row;
                gap: 0.2rem;
                align-items: flex-start;
            }
            #speechForm .flex > div {
                flex: 1;
            }
            .modal-content {
                max-width: 95vw;
                width: 95vw;
                font-size: 0.7rem;
            }
            .modal-content h2 {
                font-size: 0.85rem;
            }
            .modal-content .text-sm {
                font-size: 0.7rem;
            }
            .modal-actions button {
                padding: 0.3rem 0.6rem;
                font-size: 0.7rem;
            }
        }
        @media (max-width: 360px) {
            .container {
                padding-left: 0.15rem;
                padding-right: 0.15rem;
            }
            .grid {
                gap: 0.3rem;
            }
            .partition {
                padding: 0.3rem;
                margin-bottom: 0.5rem;
            }
            select {
                font-size: 0.6rem;
            }
            #speechesTab .flex h3, #votesTab .flex h3, #interactionsTab .flex h3 {
                display: none;
            }
            .btn-action {
                padding: 0.2rem;
            }
            nav i {
                font-size: 0.9rem;
            }
        }
    </style>
</head>

<!-- 初始为白天模式，可通过JavaScript切换为夜晚模式 -->
<body class="bg-day-bg text-warm-900 dark:bg-night-bg dark:text-cool-100 transition-colors duration-300">
    <!-- 顶部菜单栏 -->
    <header class="sticky top-0 z-50 bg-day-card/90 dark:bg-night-card/90 backdrop-blur-md shadow-sm transition-all duration-300">
        <div class="container mx-auto px-4 py-3 flex items-center justify-between">
            <!-- 左侧：功能按钮和板子选择 -->
            <div class="flex items-center space-x-1">
                <button id="resetGameBtn" class="btn-action relative group">
                    <i class="fa fa-refresh text-xl warm-icon"></i>
                    <span class="absolute bottom-full left-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">重置游戏</span>
                </button>
                <button id="boardSelectBtn" class="btn-action relative group">
                    <i class="fa fa-th-large text-xl warm-icon"></i>
                    <span class="absolute -top-1 -right-1 bg-warm-500 dark:bg-cool-500 text-white text-xs w-4 h-4 rounded-full flex items-center justify-center">12</span>
                    <!-- 板子选择下拉菜单 -->
                    <div class="absolute left-0 mt-2 w-56 bg-day-card dark:bg-night-card rounded-lg shadow-warm-lg dark:shadow-cool-lg z-50 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform origin-top scale-95 group-hover:scale-100">
                        <div class="py-1">
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人标准场（预女猎白）">12人标准场（预女猎白）</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人进阶场（狼王守卫）">12人进阶场（狼王守卫）</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人白狼王守卫">12人白狼王守卫</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人丘比特">12人丘比特</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人摄梦人">12人摄梦人</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人奇迹商人">12人奇迹商人</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人暗恋者">12人暗恋者</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人石像鬼守墓人">12人石像鬼守墓人</a>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 board-option" data-players="12" data-name="12人狼美人骑士">12人狼美人骑士</a>
                            <div class="border-t border-warm-200 dark:border-cool-800 my-1"></div>
                            <a href="#" class="block px-4 py-2 text-sm hover:bg-warm-100 dark:hover:bg-cool-800 custom-board-option">自定义板子</a>
                        </div>
                    </div>
                </button>
                <span class="hidden sm:inline text-sm font-medium" id="boardName">12人标准场</span>
            </div>
            
            <!-- 中间：阶段控制 -->
            <div class="flex items-center space-x-2">
                <button id="prevPhaseBtn" class="phase-btn warm-btn relative group">
                    <i class="fa fa-step-backward"></i>
                    <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">上一阶段</span>
                </button>
                <div id="currentPhase" class="px-4 py-1.5 bg-warm-500 dark:bg-cool-500 text-white rounded-md text-sm font-medium min-w-[120px] text-center">
                    发言阶段
                </div>
                <button id="nextPhaseBtn" class="phase-btn warm-btn relative group">
                    <i class="fa fa-step-forward"></i>
                    <span class="absolute bottom-full right-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">下一阶段</span>
                </button>
            </div>
            
            <!-- 右侧：功能按钮 -->
            <div class="flex items-center space-x-1">
                <button id="dayNightModeBtn" class="btn-action relative group">
                    <i class="fa fa-sun-o text-xl warm-icon transition-all duration-300"></i>
                    <span class="absolute bottom-full right-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">切换日夜模式</span>
                </button>
                <button id="goToPlayersBtn" class="btn-action relative group">
                    <i class="fa fa-user-circle-o text-xl warm-icon"></i>
                    <span class="absolute bottom-full right-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">玩家页面</span>
                </button>
                <button id="analysisPageBtn" class="btn-action relative group">
                    <i class="fa fa-bar-chart text-xl warm-icon"></i>
                    <span class="absolute bottom-full right-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">数据分析</span>
                </button>
                <button id="notesPageBtn" class="btn-action relative group">
                        <i class="fa fa-sticky-note text-xl warm-icon"></i>
                        <span class="absolute bottom-full right-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">游戏笔记</span>
                    </button>
                    <!-- 统计票型按钮 -->
                    <button id="countVotesBtn" class="btn-action relative group">
                        <i class="fa fa-check-square-o text-xl warm-icon"></i>
                        <span class="absolute bottom-full right-0 mb-1 px-2 py-1 bg-warm-800 dark:bg-cool-800 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all whitespace-nowrap">统计票型</span>
                    </button>
            </div>
        </div>
    </header>

    <!-- 主内容区 - 多页面结构 -->
    <main class="container mx-auto px-4 py-6">
        <!-- 玩家页面 -->
        <div id="playersPage" class="page active">
            <!-- 分区控制 -->
            <div class="mb-6 bg-day-card/70 dark:bg-night-card/70 rounded-xl p-3 backdrop-blur-sm border border-warm-200 dark:border-cool-800">
                <div class="flex flex-wrap items-center gap-2">
                    <span class="text-sm font-medium">分区依据：</span>
                    <button class="partition-mode-btn px-3 py-1.5 rounded-md text-sm bg-warm-500 dark:bg-cool-500 text-white" data-mode="all">
                        全部玩家
                    </button>
                    <button class="partition-mode-btn px-3 py-1.5 rounded-md text-sm warm-btn" data-mode="camp">
                        阵营
                    </button>
                    <button class="partition-mode-btn px-3 py-1.5 rounded-md text-sm warm-btn" data-mode="badge">
                        警位
                    </button>
                    <button class="partition-mode-btn px-3 py-1.5 rounded-md text-sm warm-btn" data-mode="stance">
                        立场
                    </button>
                    <button class="partition-mode-btn px-3 py-1.5 rounded-md text-sm warm-btn" data-mode="status">
                        状态
                    </button>
                </div>
            </div>
            
            <!-- 玩家分区容器 -->
            <div id="playersPartitionContainer">
                <!-- 玩家分区将通过JavaScript动态生成 -->
            </div>
        </div>
        
        <!-- 互动记录页面 -->
        <div id="interactionPage" class="page">
            <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm dark:shadow-cool p-4 mb-4">
                <div class="flex border-b border-warm-200 dark:border-cool-800">
                    <button class="interaction-tab py-2 px-4 font-medium text-warm-600 dark:text-cool-400 border-b-2 border-warm-500 dark:border-cool-500" data-tab="speeches">
                            <i class="fa fa-comment-o mr-1"></i> 发言记录
                        </button>
                        <button class="interaction-tab py-2 px-4 font-medium text-warm-400 dark:text-cool-600 hover:text-warm-600 dark:hover:text-cool-400 transition-colors" data-tab="votes">
                            <i class="fa fa-check-square-o mr-1"></i> 投票记录
                        </button>
                        <button class="interaction-tab py-2 px-4 font-medium text-warm-400 dark:text-cool-600 hover:text-warm-600 dark:hover:text-cool-400 transition-colors" data-tab="interactions">
                            <i class="fa fa-exchange mr-1"></i> 踩保记录
                        </button>
                </div>
                
                <!-- 发言记录内容 -->
                <div id="speechesTab" class="interaction-content py-4">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="font-medium">发言记录列表</h3>
                        <div class="flex gap-2">
                            <select id="speechFilterPhase" class="p-1 border border-warm-200 dark:border-cool-700 rounded text-sm bg-day-card dark:bg-night-card">
                                <option value="all">所有阶段</option>
                                <option value="警上">警上发言</option>
                                <option value="警下">警下发言</option>
                                <option value="放逐">放逐发言</option>
                                <option value="PK">PK发言</option>
                                <option value="遗言">遗言</option>
                            </select>
                            <select id="speechFilterPlayer" class="p-1 border border-warm-200 dark:border-cool-700 rounded text-sm bg-day-card dark:bg-night-card">
                                <option value="all">所有玩家</option>
                                <!-- 玩家选项将通过JS动态生成 -->
                            </select>
                        </div>
                    </div>
                    
                    <!-- 发言记录列表 -->
                    <div id="speechesList" class="space-y-3 max-h-[calc(100vh-280px)] overflow-y-auto">
                        <!-- 发言记录将通过JS动态生成 -->
                        <div class="text-warm-400 dark:text-cool-600 text-center py-8">
                            <i class="fa fa-comment-o text-2xl mb-2 warm-icon"></i>
                            <p>暂无发言记录</p>
                        </div>
                    </div>
                </div>
                
                <!-- 投票记录内容 -->
                <div id="votesTab" class="interaction-content py-4 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="font-medium">被投票记录（按被投票人分组）</h3>
                        <div class="flex gap-2">
                            <select id="voteFilterPhase" class="p-1 border border-warm-200 dark:border-cool-700 rounded text-sm bg-day-card dark:bg-night-card">
                                <option value="all">所有阶段</option>
                                <option value="警长">警长选举</option>
                                <option value="放逐">放逐投票</option>
                                <option value="PK">PK投票</option>
                            </select>
                            <select id="voteFilterVoter" class="p-1 border border-warm-200 dark:border-cool-700 rounded text-sm bg-day-card dark:bg-night-card">
                                <option value="all">所有投票人</option>
                                <!-- 玩家选项将通过JS动态生成 -->
                            </select>
                        </div>
                    </div>
                    
                    <!-- 投票记录列表 - 按投票人分组的一对多展示 -->
                    <div id="votesList" class="space-y-3 max-h-[calc(100vh-350px)] overflow-y-auto">
                        <!-- 投票记录将通过JS动态生成 -->
                        <div class="text-warm-400 dark:text-cool-600 text-center py-8">
                            <i class="fa fa-check-square-o text-2xl mb-2 warm-icon"></i>
                            <p>暂无被投票记录</p>
                        </div>
                    </div>
                    
                    <!-- 投票记录分页控件 -->
                    <div id="votesPagination" class="mt-3 flex justify-center items-center gap-1 hidden">
                        <button id="prevPageBtn" class="p-1 px-2 rounded border border-warm-200 dark:border-cool-700 bg-day-card dark:bg-night-card hover:bg-warm-100 dark:hover:bg-cool-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                            <i class="fa fa-chevron-left"></i>
                        </button>
                        <span class="text-sm" id="pageInfo"></span>
                        <button id="nextPageBtn" class="p-1 px-2 rounded border border-warm-200 dark:border-cool-700 bg-day-card dark:bg-night-card hover:bg-warm-100 dark:hover:bg-cool-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                            <i class="fa fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
                
                <!-- 踩保记录内容 -->
                <div id="interactionsTab" class="interaction-content py-4 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="font-medium">踩保记录（按操作人分组）</h3>
                        <div class="flex gap-2">
                            <select id="interactionFilterType" class="p-1 border border-warm-200 dark:border-cool-700 rounded text-sm bg-day-card dark:bg-night-card">
                                <option value="all">所有类型</option>
                                <option value="踩">只看踩</option>
                                <option value="保">只看保</option>
                                <option value="mentions">只看提及</option>
                                <option value="ignores">只看忽视</option>
                            </select>
                            <select id="interactionFilterSource" class="p-1 border border-warm-200 dark:border-cool-700 rounded text-sm bg-day-card dark:bg-night-card">
                                <option value="all">所有来源</option>
                                <!-- 玩家选项将通过JS动态生成 -->
                            </select>
                        </div>
                    </div>
                    
                    <!-- 踩保记录列表 - 按操作人分组的一对多展示 -->
                    <div id="interactionsList" class="space-y-3 max-h-[calc(100vh-280px)] overflow-y-auto">
                        <!-- 踩保记录将通过JS动态生成 -->
                        <div class="text-warm-400 dark:text-cool-600 text-center py-8">
                            <i class="fa fa-exchange text-2xl mb-2 warm-icon"></i>
                            <p>暂无踩保记录</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 分析页面 -->
        <div id="analysisPage" class="page">
            <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm dark:shadow-cool p-4 mb-4">
                <h3 class="text-lg font-medium mb-4">互动分析</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="bg-warm-50 dark:bg-night-card-light p-3 rounded-lg">
                        <h4 class="font-medium mb-2">投票统计</h4>
                        <div id="voteAnalysis" class="text-sm text-warm-700 dark:text-cool-300">
                            点击"互动"页面添加投票记录后显示统计
                        </div>
                    </div>
                    <div class="bg-warm-50 dark:bg-night-card-light p-3 rounded-lg">
                        <h4 class="font-medium mb-2">踩保关系</h4>
                        <div id="interactionAnalysis" class="text-sm text-warm-700 dark:text-cool-300">
                            点击玩家卡片的"踩/保"按钮添加记录后显示分析
                        </div>
                    </div>
                    
                    <!-- 新增立场分析 -->
                    <div class="bg-warm-50 dark:bg-night-card-light p-3 rounded-lg">
                        <h4 class="font-medium mb-2">立场分析</h4>
                        <div id="stanceAnalysis" class="text-sm text-warm-700 dark:text-cool-300">
                            通过投票、踩人和保人情况分析玩家立场分布
                        </div>
                    </div>
                    
                    <!-- 新增关注度分析 -->
                    <div class="bg-warm-50 dark:bg-night-card-light p-3 rounded-lg">
                        <h4 class="font-medium mb-2">关注度分析</h4>
                        <div id="attentionAnalysis" class="text-sm text-warm-700 dark:text-cool-300">
                            分析玩家对其他玩家的提及和忽视情况
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 笔记页面 -->
        <div id="notesPage" class="page">
            <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm dark:shadow-cool p-4 mb-4">
                <h3 class="text-lg font-medium mb-4">全局笔记</h3>
                <textarea id="globalNotes" class="w-full p-3 border border-warm-200 dark:border-cool-700 rounded-md bg-warm-50 dark:bg-night-card-light h-40 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all small-textarea" placeholder="在这里记录全局笔记..."></textarea>
                <button id="saveNotesBtn" class="mt-3 px-4 py-2 primary-btn rounded-md">
                    保存笔记
                </button>
            </div>
        </div>
    </main>

    <!-- 页面切换导航 -->
    <nav class="fixed bottom-0 left-0 right-0 bg-day-card/95 dark:bg-night-card/95 backdrop-blur-md shadow-lg z-40 transition-all duration-300">
        <div class="container mx-auto">
            <div class="flex justify-around py-3">
                <button id="homePageBtn" class="flex flex-col items-center text-warm-600 dark:text-cool-400">
                    <i class="fa fa-users text-xl"></i>
                </button>
                <button id="interactionPageBtn" class="flex flex-col items-center text-warm-400 dark:text-cool-600 hover:text-warm-600 dark:hover:text-cool-400 transition-colors">
                    <i class="fa fa-exchange text-xl"></i>
                </button>
                <button id="analysisNavBtn" class="flex flex-col items-center text-warm-400 dark:text-cool-600 hover:text-warm-600 dark:hover:text-cool-400 transition-colors">
                    <i class="fa fa-pie-chart text-xl"></i>
                </button>
                <button id="notesNavBtn" class="flex flex-col items-center text-warm-400 dark:text-cool-600 hover:text-warm-600 dark:hover:text-cool-400 transition-colors">
                    <i class="fa fa-book text-xl"></i>
                </button>
            </div>
        </div>
    </nav>

    <!-- 模态框容器 (所有弹窗将动态插入这里) -->
    <div id="modalContainer" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
        <!-- 模态框内容将通过JavaScript动态生成 -->
    </div>

    <!-- 批量选择玩家模态框 (用于投票、踩、保功能) -->
    <div id="multiSelectModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
        <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
            <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-bold" id="multiSelectTitle">选择玩家</h3>
                    <button id="closeMultiSelectBtn" class="btn-action">
                        <i class="fa fa-times warm-icon"></i>
                    </button>
                </div>
            </div>
            
            <div class="p-5">
                <p id="multiSelectDescription" class="text-sm text-warm-600 dark:text-cool-400 mb-4">请选择目标玩家</p>
                
                <!-- 玩家选择网格 -->
                <div id="playersSelectGrid" class="grid grid-cols-4 gap-3 mb-5">
                    <!-- 玩家号码牌将通过JS动态生成 -->
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm mb-1" id="multiSelectReasonLabel">原因（可选）</label>
                    <textarea id="multiSelectReason" class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-warm-50 dark:bg-night-card-light h-24 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all small-textarea" placeholder="输入原因..."></textarea>
                </div>
            </div>
            
            <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                <button id="cancelMultiSelectBtn" class="px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                    取消
                </button>
                <button id="confirmMultiSelectBtn" class="px-4 py-2 primary-btn rounded-md">
                    保存
                </button>
            </div>
        </div>
    </div>

    <script>
        // 游戏数据模型
        const gameData = {
            // 当前板子配置
            board: {
                name: "12人标准场（预女猎白）",
                playerCount: 12,
                roles: {
                    town: ["预言家", "女巫", "猎人", "白痴", "平民"],
                    wolves: ["狼人", "狼人", "狼人", "狼人"]
                }
            },
            
            // 当前游戏阶段
            phase: {
                current: "发言", // 发言、投票、放逐、夜晚等
                day: true, // 白天/夜晚 - 默认是白天模式
                round: 1, // 第几天/第几轮
                hasSheriff: false, // 是否有警长
                sheriff: null // 警长玩家编号
            },
            
            // 玩家数据
            players: [],
            
            // 互动记录
            interactions: {
                speeches: [], // 发言记录
                votes: [], // 投票记录
                踩: [], // 踩人记录
                保: [],  // 保人记录
                mentions: [], // 提及记录
                ignores: []  // 忽视记录
            },
            
            // 笔记数据
            notes: {
                global: "", // 全局笔记
                essays: [], // 随笔
                keyFrames: [] // 关键帧
            },
            
            // 分区设置
            partition: {
                mode: "all" // all, camp, status, badge
            },
            
            // 批量选择相关数据
            multiSelect: {
                sourceId: null, // 来源玩家ID
                type: null, // 操作类型: vote, 踩, 保, mentions, ignores
                selectedIds: [] // 选中的目标玩家ID
            }
        };
        
        // 分页相关全局变量
        let currentVotePage = 1; // 当前投票记录页
        let votesPerPage = 3; // 每页显示的投票组数量
        let totalVotePages = 1; // 总页数
        
        // 当前筛选条件下的所有投票记录组
        let allVoteGroups = [];

        // 保存游戏数据到本地存储
        function saveGameDataToLocal() {
            try {
                localStorage.setItem('werewolfGameData', JSON.stringify(gameData));
            } catch (error) {
                console.error('保存游戏数据失败:', error);
            }
        }
        // 生成玩家默认颜色（日间暖色，夜间冷色）
        function generatePlayerColor(playerId, count) {
            const isDarkMode = document.documentElement.classList.contains('dark');
            
            // 计算色调，确保不同号码有明显区分
            let hue;
            if (isDarkMode) {
                // 冷色调范围 (190-220) - 青色系列，适合夜间UI
                hue = 190 + (playerId * (30 / count)) % 30;
            } else {
                // 暖色调范围 (35-50) - 橙色系列，适合日间UI
                hue = 35 + (playerId * (15 / count)) % 15;
            }
            
            // 饱和度和亮度固定，确保一致性
            const saturation = 70; // 较高饱和度
            const lightness = isDarkMode ? 30 : 60;  // 夜间暗一些，日间亮一些
            // 10%透明度
            return `hsla(${hue}, ${saturation}%, ${lightness}%, 0.1)`;
        }

        // 获取身份对应的颜色类名（根据日夜模式切换暖/冷色）
        function getRoleColorClass(camp, roleIndex) {
            const isDarkMode = document.documentElement.classList.contains('dark');
            
            // 默认使用阵营基础色
            if (!roleIndex || roleIndex < 1) {
                return isDarkMode ? 
                    (camp === "town" ? "town-cool" : 
                     camp === "wolf" ? "wolf-cool" :
                     "third") :
                    (camp === "town" ? "town-warm" : 
                     camp === "wolf" ? "wolf" :
                     "third-warm");
            }
            
            // 根据阵营、身份索引和日夜模式返回同色系的颜色类名
            if (isDarkMode) {
                return `${camp}-cool-${roleIndex}`;
            } else {
                return `${camp}-warm-${roleIndex}`;
            }
        }

        // 获取玩家号码牌的颜色样式
        function getPlayerBadgeStyle(player) {
            // 如果已标记阵营，使用阵营或身份对应的颜色
            if (player.role.camp && player.role.camp !== "unknown") {
                // 查找身份在阵营中的索引
                const roleIndex = getRoleIndexInCamp(player.role.camp, player.role.specific);
                const colorClass = getRoleColorClass(player.role.camp, roleIndex);
                return `bg-${colorClass}`;
            }
            
            // 未标记阵营，使用默认颜色
            return player.color;
        }

        // 获取身份在阵营中的索引
        function getRoleIndexInCamp(camp, roleName) {
            if (!roleName) return 0;
            
            switch(camp) {
                case "town":
                    return gameData.board.roles.town.indexOf(roleName) + 1;
                case "wolf":
                    return gameData.board.roles.wolves.indexOf(roleName) + 1;
                default:
                    return 0;
            }
        }

        // 初始化玩家数据
        function initPlayers(count) {
            gameData.players = [];
            for (let i = 1; i <= count; i++) {
                // 生成适合当前模式的颜色
                const color = generatePlayerColor(i, count);
                
                gameData.players.push({
                    id: i,
                    color: color,
                    role: {
                        camp: "unknown", // unknown, town, wolf, third
                        specific: null
                    },
                    status: "alive", // alive, dead, exposed
                    deathType: null, // 出局方式：放逐、被刀等
                    badgeStatus: "off", // off, on, quit (警下、上警、退水)
                    specialTags: [], // 特殊标记：金水、银水等
                    notes: "", // 备注
                    voteCount: 0, // 得票数
                    踩Count: 0, // 被踩次数
                    保Count: 0, // 被保次数
                    mentionCount: 0, // 被提及次数
                    ignoreCount: 0  // 被忽视次数
                });
            }
            
            // 更新筛选器的玩家选项
            updateAllFilterPlayers();
        }

        // 统一的弹窗函数 - 确保所有弹窗能正常显示和关闭
        function showConfirmDialog(...args) {
            // 兼容三种调用方式：
            // 1. showConfirmDialog('message')
            // 2. showConfirmDialog({title: '标题', message: '内容', ...})
            // 3. showConfirmDialog('标题', '内容', callback)
            let message = '';
            let title = '';
            let confirmText = '确定';
            let cancelText = '取消';
            let confirmCallback = null;
            
            if (args.length === 1) {
                if (typeof args[0] === 'string') {
                    // 方式1：只传消息
                    message = args[0];
                } else {
                    // 方式2：配置对象
                    const options = args[0];
                    message = options.message || '';
                    title = options.title || '';
                    confirmText = options.confirmText || '确定';
                    cancelText = options.cancelText || '取消';
                    confirmCallback = options.confirmCallback;
                }
            } else if (args.length >= 2) {
                // 方式3：标题, 消息, [回调]
                title = args[0];
                message = args[1];
                if (args.length >= 3 && typeof args[2] === 'function') {
                    confirmCallback = args[2];
                }
            }

            // 创建Promise并始终返回
            return new Promise((resolve) => {
                try {
                    // 检查modalContainer是否存在
                    let modalContainer = document.getElementById('modalContainer');
                    if (!modalContainer) {
                        // 如果不存在，创建一个
                        modalContainer = document.createElement('div');
                        modalContainer.id = 'modalContainer';
                        modalContainer.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden';
                        document.body.appendChild(modalContainer);
                    }

                    const dialogHTML = `
                        <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md p-5">
                            ${title ? `<div class="mb-2"><h3 class="text-warm-800 dark:text-cool-200 font-bold">${title}</h3></div>` : ''}
                            <div class="mb-4">
                                <p class="text-warm-700 dark:text-cool-300">${message}</p>
                            </div>
                            <div class="flex justify-end gap-3">
                                <button id="dialogCancelBtn" class="px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                                    ${cancelText}
                                </button>
                                <button id="dialogConfirmBtn" class="px-4 py-2 primary-btn rounded-md">
                                    ${confirmText}
                                </button>
                            </div>
                        </div>
                    `;
                    
                    // 清空模态框
                    modalContainer.innerHTML = dialogHTML;
                    modalContainer.classList.remove('hidden');
                    modalContainer.classList.add('flex');
                    
                    // 处理取消按钮
                    const cancelBtn = document.getElementById('dialogCancelBtn');
                    cancelBtn.addEventListener('click', () => {
                        closeDetailModal();
                        resolve(false);
                    });
                    
                    // 处理确认按钮
                    const confirmBtn = document.getElementById('dialogConfirmBtn');
                    confirmBtn.addEventListener('click', () => {
                        // 包装回调函数，确保即使回调出错也能关闭弹窗
                        try {
                            if (typeof confirmCallback === 'function') {
                                confirmCallback();
                            }
                        } catch (callbackError) {
                            console.error('确认回调执行出错:', callbackError);
                            showToast('操作执行过程中出错', 'error');
                        } finally {
                            // 确保无论如何都会关闭弹窗
                            closeDetailModal();
                            resolve(true);
                        }
                    });
                    
                    // 添加ESC键关闭对话框的支持
                    const handleEsc = (e) => {
                        if (e.key === 'Escape') {
                            closeDetailModal();
                            resolve(false);
                            document.removeEventListener('keydown', handleEsc);
                        }
                    };
                    document.addEventListener('keydown', handleEsc);
                } catch (error) {
                    console.error('Error in showConfirmDialog:', error);
                    // 出错时默认返回false
                    resolve(false);
                    // 降级方案：使用原生confirm但不返回其值，因为Promise已经被解决
                    window.confirm(message);
                }
            });
        }
        
        // 显示提示信息的函数
        function showToast(message, type = 'info') {
            // 创建提示元素
            const toast = document.createElement('div');
            toast.className = `fixed top-20 left-1/2 transform -translate-x-1/2 px-4 py-2 rounded-md z-50 text-sm ${type === 'success' ? 'bg-green-500 text-white' : 'bg-warm-500 dark:bg-cool-500 text-white'}`;
            toast.textContent = message;
            
            // 添加到页面
            document.body.appendChild(toast);
            
            // 3秒后自动消失
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 3000);
        }
        
        // 显示警告信息的函数
        function showAlert(message) {
            // 创建警告对话框
            const modalContainer = document.getElementById('modalContainer');
            const alertHTML = `
                <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md p-5">
                    <div class="mb-4">
                        <p class="text-warm-700 dark:text-cool-300">${message}</p>
                    </div>
                    <div class="flex justify-end">
                        <button id="alertOKBtn" class="px-4 py-2 primary-btn rounded-md">
                            确定
                        </button>
                    </div>
                </div>
            `;
            
            modalContainer.innerHTML = alertHTML;
            modalContainer.classList.remove('hidden');
            modalContainer.classList.add('flex');
            
            return new Promise((resolve) => {
                document.getElementById('alertOKBtn').addEventListener('click', function() {
                    // 确保警告对话框能正常关闭
                    try {
                        closeDetailModal();
                        resolve();
                    } catch (error) {
                        console.error('关闭警告对话框时出错:', error);
                        resolve();
                    }
                });
            });
        }
        
        // 兼容旧代码的确认操作函数
        function confirmAction(message) {
            // 使用原生confirm以兼容同步代码
            return confirm(message);
        }

        // 重置玩家数据函数
        function resetPlayers() {
            // 初始化玩家数据
            initPlayers(gameData.board.playerCount);
            
            // 重新渲染玩家分区
            renderPlayers();
            
            // 更新筛选器
            updateAllFilterPlayers();
        }
        
        // 切换游戏板子
        function switchBoard(option) {
            // 使用我们的自定义确认对话框（配置对象格式）
            showConfirmDialog({
                title: '更换游戏板子',
                message: '确定要更换游戏板子吗？所有记录将被清空。',
                confirmText: '确定',
                cancelText: '取消',
                confirmCallback: () => {
                    const playerCount = parseInt(option.dataset.players);
                    const boardName = option.dataset.name;
                    
                    // 更新板子配置
                    gameData.board.name = boardName;
                    gameData.board.playerCount = playerCount;
                    
                    // 根据不同板子设置角色配置
                    if (boardName.includes("标准场（预女猎白）")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "白痴", "平民"],
                            wolves: ["狼人", "狼人", "狼人", "狼人"]
                        };
                    } else if (boardName.includes("进阶场（狼王守卫）")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "守卫", "平民"],
                            wolves: ["狼王", "狼人", "狼人", "狼人"]
                        };
                    } else if (boardName.includes("白狼王守卫")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "守卫", "平民"],
                            wolves: ["白狼王", "狼人", "狼人", "狼人"]
                        };
                    } else if (boardName.includes("丘比特")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "白痴", "平民"],
                            wolves: ["狼王", "狼人", "狼人"],
                            third: ["盗贼", "丘比特"]
                        };
                    } else if (boardName.includes("摄梦人")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "摄梦人", "平民"],
                            wolves: ["狼王", "狼人", "狼人", "狼人"]
                        };
                    } else if (boardName.includes("奇迹商人")) {
                        gameData.board.roles = {
                            town: ["预言家", "奇迹商人", "女巫", "守卫", "平民"],
                            wolves: ["狼王", "狼人", "狼人", "狼人"]
                        };
                    } else if (boardName.includes("暗恋者")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "守卫", "平民"],
                            wolves: ["狼人", "狼人", "狼人", "狼人"],
                            third: ["暗恋者"]
                        };
                    } else if (boardName.includes("石像鬼守墓人")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "守墓人", "平民"],
                            wolves: ["石像鬼", "狼人", "狼人", "狼人"]
                        };
                    } else if (boardName.includes("狼美人骑士")) {
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "守卫", "骑士", "平民"],
                            wolves: ["狼美人", "狼人", "狼人", "狼人"]
                        };
                    } else {
                        // 默认12人标准场
                        gameData.board.roles = {
                            town: ["预言家", "女巫", "猎人", "白痴", "平民"],
                            wolves: ["狼人", "狼人", "狼人", "狼人"]
                        };
                    }
                    
                    // 更新显示的板子名称
                    document.getElementById('boardName').textContent = boardName.split("（")[0];
                    
                    // 更新玩家数量标记
                    document.querySelector('#boardSelectBtn span').textContent = playerCount;
                    
                    // 重新初始化玩家
                    initPlayers(gameData.board.playerCount);
                    
                    // 重置游戏阶段
                    gameData.phase = {
                        current: "发言",
                        day: true,
                        round: 1,
                        hasSheriff: false,
                        sheriff: null
                    };
                    
                    // 清空互动记录
                    gameData.interactions = {
                        speeches: [],
                        votes: [],
                        踩: [],
                        保: [],
                        mentions: [],
                        ignores: []
                    };
                    
                    // 清空笔记
                    gameData.notes.global = "";
                    document.getElementById('globalNotes').value = "";
                    
                    // 更新UI
                    document.getElementById('currentPhase').textContent = gameData.phase.current;
                    renderPlayers();
                    renderSpeechRecords();
                    renderVoteRecords();
                    renderInteractionRecords();
                    updateAnalysisData();
                    
                    // 切换到玩家页面
                    switchPage('playersPage');
                    
                    // 保存数据到本地存储
                    saveGameDataToLocal();
                    
                    // 显示重置成功提示
                    showToast('游戏板子已更换，游戏已重置');
                }
            }).catch(error => {
                console.error('Error in switchBoard:', error);
                // 降级处理：如果Promise出错，使用原生confirm
                if (window.confirm('确定要更换游戏板子吗？所有记录将被清空。')) {
                    const playerCount = parseInt(option.dataset.players);
                    const boardName = option.dataset.name;
                    
                    // 更新板子配置
                    gameData.board.name = boardName;
                    gameData.board.playerCount = playerCount;
                    
                    // 重置游戏
                    resetGame();
                }
            });
        }

        // 获取分区数据
        function getPartitionData() {
            const mode = gameData.partition.mode;
            const partitions = {};
            
            // 检查是否为12人场且需要单独分区
            const is12PlayerMode = gameData.board.playerCount === 12 && mode === "default";
            
            if (is12PlayerMode) {
                // 12人场 - 每位玩家单独分区
                gameData.players.forEach(player => {
                    const badgeColor = getPlayerBadgeStyle(player);
                    partitions[player.id] = {
                        name: `玩家${player.id}`,
                        color: badgeColor.replace('number-badge ', ''), // 提取颜色类
                        players: [player]
                    };
                });
            } else {
                switch(mode) {
                    case "all":
                        // 全部玩家放在一个分区
                        partitions["all"] = {
                            name: "全部玩家",
                            color: "warm-500 dark:cool-500",
                            players: [...gameData.players]
                        };
                        break;
                        
                    case "stance":
                        // 按立场分区（来自立场分析的二分着色结果）
                        partitions["stance1"] = {
                            name: "立场1",
                            color: "warm-500 dark:cool-500",
                            players: []
                        };
                        partitions["stance2"] = {
                            name: "立场2",
                            color: "warm-700 dark:cool-300",
                            players: []
                        };
                        partitions["unknownStance"] = {
                            name: "立场不明",
                            color: "warm-400 dark:cool-600",
                            players: []
                        };

                        try {
                            const graph = buildPositionNetwork();
                            const positions = assignPositions(graph);
                            gameData.players.forEach(player => {
                                const pos = positions[player.id] ?? 0;
                                if (pos === 1) {
                                    partitions["stance1"].players.push(player);
                                } else if (pos === 2) {
                                    partitions["stance2"].players.push(player);
                                } else {
                                    partitions["unknownStance"].players.push(player);
                                }
                            });
                        } catch (e) {
                            console.warn('立场分区计算失败，回退为全部玩家分区:', e);
                            partitions["all"] = {
                                name: "全部玩家",
                                color: "warm-500 dark:cool-500",
                                players: [...gameData.players]
                            };
                        }
                        break;

                    case "camp":
                        // 按阵营分区（三大阵营：神民阵营、狼人阵营、三方阵营）
                        partitions["unknown"] = {
                            name: "未知阵营",
                            color: "warm-400 dark:cool-600",
                            players: []
                        };
                        partitions["town"] = {
                            name: "神民阵营",
                            color: "town-warm dark:town",
                            players: []
                        };
                        partitions["wolf"] = {
                            name: "狼人阵营",
                            color: "wolf dark:wolf-cool",
                            players: []
                        };
                        partitions["third"] = {
                            name: "三方阵营",
                            color: "third-warm dark:third",
                            players: []
                        };
                        
                        // 分配玩家到对应阵营
                        gameData.players.forEach(player => {
                            let camp = player.role.camp || "unknown";
                            // 确保所有角色都使用正确的阵营名称
                            
                            if (partitions[camp]) {
                                partitions[camp].players.push(player);
                            } else {
                                partitions["unknown"].players.push(player);
                            }
                        });
                        break;
                        
                    case "status":
                        // 按状态分区
                        partitions["alive"] = {
                            name: "存活玩家",
                            color: "warm-500 dark:cool-500",
                            players: []
                        };
                        partitions["dead"] = {
                            name: "已出局玩家",
                            color: "warm-300 dark:cool-700",
                            players: []
                        };
                        partitions["exposed"] = {
                            name: "已自曝玩家",
                            color: "wolf dark:wolf-cool",
                            players: []
                        };
                        
                        // 分配玩家到对应状态
                        gameData.players.forEach(player => {
                            if (partitions[player.status]) {
                                partitions[player.status].players.push(player);
                            } else {
                                partitions["alive"].players.push(player);
                            }
                        });
                        break;
                        
                    case "badge":
                        // 按警位状态分区
                        partitions["on"] = {
                            name: "上警玩家",
                            color: "badge-warm dark:badge-cool",
                            players: []
                        };
                        partitions["quit"] = {
                            name: "已退水玩家",
                            color: "warm-300 dark:cool-700",
                            players: []
                        };
                        partitions["off"] = {
                            name: "警下玩家",
                            color: "warm-300 dark:cool-700",
                            players: []
                        };
                        
                        // 分配玩家到对应警位状态
                        gameData.players.forEach(player => {
                            if (partitions[player.badgeStatus]) {
                                partitions[player.badgeStatus].players.push(player);
                            } else {
                                partitions["off"].players.push(player);
                            }
                        });
                        break;
                    
                    default:
                        // 默认分区 - 每2人一组
                        const groupSize = 2;
                        for (let i = 0; i < gameData.players.length; i += groupSize) {
                            const group = gameData.players.slice(i, i + groupSize);
                            const groupId = i / groupSize + 1;
                            const firstPlayer = group[0];
                            const badgeColor = getPlayerBadgeStyle(firstPlayer);
                            
                            partitions[groupId] = {
                                name: group.length === 1 ? `玩家${firstPlayer.id}` : `第${groupId}组`,
                                color: badgeColor.replace('number-badge ', ''),
                                players: group
                            };
                        }
                        break;
                }
            }
            
            // 验证分区玩家总数等于总人数
            const totalInPartitions = Object.values(partitions).reduce((sum, partition) => {
                return sum + partition.players.length;
            }, 0);
            
            if (totalInPartitions !== gameData.players.length) {
                console.warn(`分区玩家总数(${totalInPartitions})不等于游戏总人数(${gameData.players.length})`);
            }
            
            // 验证分区内的身份牌类型都是当前板子中包含的类型
            const validRoles = new Set();
            if (gameData.board.roles) {
                Object.values(gameData.board.roles).forEach(roleList => {
                    if (roleList && Array.isArray(roleList)) {
                        roleList.forEach(role => validRoles.add(role));
                    }
                });
            }
            
            // 检查每个玩家的身份牌是否有效
            gameData.players.forEach(player => {
                if (player.role.specific && !validRoles.has(player.role.specific)) {
                    console.warn(`玩家${player.id}的身份牌"${player.role.specific}"不在当前板子的角色列表中`);
                }
            });
            
            // 过滤空分区
            const result = {};
            Object.keys(partitions).forEach(key => {
                if (partitions[key].players.length > 0) {
                    result[key] = partitions[key];
                }
            });
            
            return result;
        }

        // 渲染玩家分区
        function renderPlayers() {
            const container = document.getElementById('playersPartitionContainer');
            container.innerHTML = '';
            
            // 获取分区数据
            const partitions = getPartitionData();
            
            // 渲染每个分区
            Object.values(partitions).forEach(partition => {
                // 检查分区中是否有出局玩家，为分区容器添加灰度效果
                const hasDeadPlayers = partition.players.some(p => p.status === "dead" || p.status === "exposed");
                const deadPartitionClass = hasDeadPlayers ? "filter grayscale-50 dark:brightness-75 dark:sepia-20 dark:hue-rotate-340" : "";
                
                // 创建分区容器
                const partitionEl = document.createElement('div');
                partitionEl.className = `partition ${deadPartitionClass}`;
                
                // 分区标题
                const titleEl = document.createElement('div');
                titleEl.className = `flex items-center mb-4`;
                titleEl.innerHTML = `
                    <div class="w-3 h-3 rounded-full bg-${partition.color} mr-2"></div>
                    <h3 class="font-medium">${partition.name}（${partition.players.length}人）</h3>
                `;
                partitionEl.appendChild(titleEl);
                
                // 玩家网格
                const playersGrid = document.createElement('div');
                // 在手机上使用2列网格，平板上使用3列，大屏幕上使用4-5列
                playersGrid.className = 'grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3';
                partitionEl.appendChild(playersGrid);
                
                // 添加玩家卡片
                partition.players.forEach(player => {
                    // 确定号码牌颜色样式
                    const badgeColor = getPlayerBadgeStyle(player);
                    
                    // 如果玩家已出局，添加灰度
                    const isDead = player.status === "dead" || player.status === "exposed";
                    const deadClass = isDead ? "filter grayscale-65" : "";
                    
                    // 创建玩家分区卡片
                    const playerCard = document.createElement('div');
                    playerCard.className = `player-card ${deadClass} transition-all duration-300 hover:scale-[1.02]`;
                    playerCard.dataset.playerId = player.id;
                    
                    // 移除互动计数显示
                    
                    playerCard.innerHTML = `
                        <div class="p-4">
                            <!-- 号码牌和基本操作 -->
                            <div class="flex items-start justify-between">
                                <div class="relative">
                                    <!-- 号码牌 -->
                                    <div class="number-badge ${badgeColor} player-badge" data-player-id="${player.id}">
                                        ${player.id}
                                    </div>
                                    
                                    <!-- 特殊身份标记 (如果有) - 缩小标签尺寸 -->
                                    <div class="absolute -bottom-1 -right-1 flex flex-wrap gap-0.5">
                                        ${player.specialTags.map(tag => {
                                            let tagClass = "";
                                            if (tag === "金水") tagClass = "bg-gold/80";
                                            if (tag === "银水") tagClass = "bg-silver/80";
                                            if (tag === "铜水") tagClass = "bg-copper/80";
                                            if (tag === "警徽流1") tagClass = "bg-badge-warm/80 dark:bg-badge-cool/80";
                                            if (tag === "警徽流2") tagClass = "bg-badge-warm/80 dark:bg-badge-cool/80";
                                            if (tag === "警徽流3") tagClass = "bg-badge-warm/80 dark:bg-badge-cool/80";
                                             
                                            return `<span class="w-3 h-3 rounded-full ${tagClass} text-[9px] flex items-center justify-center text-white">
                                                ${tag.charAt(0)}
                                            </span>`;
                                        }).join('')}
                                    </div>
                                    
                                    <!-- 警位状态和警徽 - 缩小尺寸 -->
                                    <div class="absolute -top-1 -left-1">
                                        ${player.id === gameData.phase.sheriff ? 
                                            '<i class="fa fa-gavel text-badge-warm dark:text-badge-cool text-sm animate-pulse"></i>' : 
                                            player.badgeStatus === "on" ? 
                                            '<i class="fa fa-shield text-badge-warm dark:text-badge-cool text-sm"></i>' : 
                                            player.badgeStatus === "quit" ? 
                                            '<i class="fa fa-shield text-warm-300 dark:text-cool-700 text-sm"></i>' : ''
                                        }
                                    </div>
                                    
                                    <!-- 投票数指示器 -->
                                    ${player.voteCount > 0 ? `<div class="voting-indicator bg-warm-400 dark:bg-cool-600 text-white">${player.voteCount}</div>` : ''}
                                </div>
                                
                                <!-- 操作按钮组 -->
                                <div class="flex gap-1">
                                    <button class="btn-action speech-btn" title="发言记录">
                                        <i class="fa fa-microphone warm-icon"></i>
                                    </button>
                                    <button class="btn-action vote-btn" title="得票记录">
                                        <i class="fa fa-check-square-o warm-icon"></i>
                                    </button>
                                    <button class="btn-action badge-btn" title="警位状态">
                                        <i class="fa fa-shield warm-icon"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 身份和状态显示 - 缩小标签尺寸 -->
                            <div class="mt-3 text-xs">
                                <div class="flex flex-wrap gap-1 mb-1">
                                    ${player.role.camp !== "unknown" ? 
                                        `<span class="px-1.5 py-0.25 rounded-full text-[10px] ${
                                            player.role.camp === "town" ? "bg-town-warm/20 text-town-warm dark:bg-town/20 dark:text-town" :
                                            player.role.camp === "wolf" ? "bg-wolf/20 text-wolf dark:bg-wolf-cool/20 dark:text-wolf-cool" :
                                            player.role.camp === "third" ? "bg-third-warm/20 text-third-warm dark:bg-third/20 dark:text-third" :
                                            "bg-town-warm/20 text-town-warm dark:bg-town/20 dark:text-town"
                                        }">
                                            ${player.role.specific || 
                                                (player.role.camp === "town" ? "神民" : 
                                                 player.role.camp === "wolf" ? "狼人" : "第三方")}
                                        </span>` : ''
                                    }
                                    
                                    <!-- 只显示非存活状态 -->
                                    ${player.status !== "alive" ? `
                                    <span class="px-1.5 py-0.25 rounded-full text-[10px] ${
                                        player.status === "dead" ? "bg-warm-100 dark:bg-cool-800 text-warm-800 dark:text-cool-300" :
                                        "bg-wolf/20 text-wolf dark:bg-wolf-cool/20 dark:text-wolf-cool"
                                    }">
                                        ${player.status === "dead" ? `出局(${player.deathType || '未知'})` : "自曝"}
                                    </span>` : ''}
                                </div>
                                
                                <!-- 互动计数已移除 -->
                                
                                <!-- 简短备注 - 缩小尺寸 -->
                                <div class="text-warm-600 dark:text-cool-400 text-[10px] truncate">
                                    ${player.notes || "无备注"}
                                </div>
                            </div>
                            
                            <!-- 踩保记录按钮 -->
                            <div class="mt-2 flex gap-2">
                                <button class="flex-1 py-1 text-xs warm-btn hover:bg-red-100 hover:text-red-800 dark:hover:bg-red-900/30 dark:hover:text-red-400 transition-colors 踩-btn" title="踩">
                                    <i class="fa fa-thumbs-down"></i>
                                </button>
                                <button class="flex-1 py-1 text-xs warm-btn hover:bg-green-100 hover:text-green-800 dark:hover:bg-green-900/30 dark:hover:text-green-400 transition-colors 保-btn" title="保">
                                    <i class="fa fa-thumbs-up"></i>
                                </button>
                                <button class="flex-1 py-1 text-xs warm-btn hover:bg-blue-100 hover:text-blue-800 dark:hover:bg-blue-900/30 dark:hover:text-blue-400 transition-colors mentions-btn" title="提及">
                                    <i class="fa fa-comment"></i>
                                </button>
                                <button class="flex-1 py-1 text-xs warm-btn hover:bg-gray-100 hover:text-gray-800 dark:hover:bg-gray-700/30 dark:hover:text-gray-400 transition-colors ignores-btn" title="忽视">
                                    <i class="fa fa-ban"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    
                    playersGrid.appendChild(playerCard);
                });
                
                container.appendChild(partitionEl);
            });
            
            // 绑定玩家卡片事件
            bindPlayerCardEvents();
        }

        // 绑定玩家卡片事件
        function bindPlayerCardEvents() {
            // 点击号码牌查看详情
            document.querySelectorAll('.player-badge').forEach(badge => {
                badge.addEventListener('click', () => {
                    const playerId = parseInt(badge.dataset.playerId);
                    openPlayerDetailModal(playerId);
                });
            });
            
            // 发言按钮
            document.querySelectorAll('.speech-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const playerId = parseInt(btn.closest('.player-card').dataset.playerId);
                    openSpeechModal(playerId);
                });
            });
            
            // 投票按钮 - 打开批量选择模态框
            document.querySelectorAll('.vote-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const playerId = parseInt(btn.closest('.player-card').dataset.playerId);
                    openMultiSelectModal(playerId, 'vote');
                });
            });
            
            // 警位按钮 - 长按切换
            document.querySelectorAll('.badge-btn').forEach(btn => {
                let longPressTimer;
                const pressDuration = 200; // 长按时间阈值（毫秒）
                
                btn.addEventListener('mousedown', (e) => {
                    e.stopPropagation();
                    longPressTimer = setTimeout(() => {
                        const playerCard = btn.closest('.player-card');
                        const playerId = parseInt(playerCard.dataset.playerId);
                        toggleBadgeStatus(playerId);
                        showToast('警位状态已切换');
                    }, pressDuration);
                });
                
                // 鼠标松开或离开按钮时清除定时器
                btn.addEventListener('mouseup', () => {
                    clearTimeout(longPressTimer);
                });
                
                btn.addEventListener('mouseleave', () => {
                    clearTimeout(longPressTimer);
                });
                
                // 移动端触摸事件支持
                btn.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    longPressTimer = setTimeout(() => {
                        const playerCard = btn.closest('.player-card');
                        const playerId = parseInt(playerCard.dataset.playerId);
                        toggleBadgeStatus(playerId);
                        showToast('警位状态已切换');
                    }, pressDuration);
                });
                
                btn.addEventListener('touchend', () => {
                    clearTimeout(longPressTimer);
                });
                
                btn.addEventListener('touchmove', () => {
                    clearTimeout(longPressTimer);
                });
            });
            
            // 踩按钮 - 打开批量选择模态框
            document.querySelectorAll('.踩-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const playerId = parseInt(btn.closest('.player-card').dataset.playerId);
                    openMultiSelectModal(playerId, '踩');
                });
            });
            
            // 保按钮 - 打开批量选择模态框
            document.querySelectorAll('.保-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const playerId = parseInt(btn.closest('.player-card').dataset.playerId);
                    openMultiSelectModal(playerId, '保');
                });
            });
            
            // 提及按钮 - 打开批量选择模态框
            document.querySelectorAll('.mentions-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const playerId = parseInt(btn.closest('.player-card').dataset.playerId);
                    openMultiSelectModal(playerId, 'mentions');
                });
            });
            
            // 忽视按钮 - 打开批量选择模态框
            document.querySelectorAll('.ignores-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const playerId = parseInt(btn.closest('.player-card').dataset.playerId);
                    openMultiSelectModal(playerId, 'ignores');
                });
            });
        }

        // 打开批量选择玩家模态框
        function openMultiSelectModal(sourceId, type) {
            // 确保批量选择模态框存在；如不存在（可能曾被误删），则重建并绑定事件
            let modal = document.getElementById('multiSelectModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'multiSelectModal';
                modal.className = 'fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden items-center justify-center p-4';
                modal.innerHTML = `
        <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
            <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-bold" id="multiSelectTitle">选择玩家</h3>
                    <button id="closeMultiSelectBtn" class="btn-action">
                        <i class="fa fa-times warm-icon"></i>
                    </button>
                </div>
            </div>
            
            <div class="p-5">
                <p id="multiSelectDescription" class="text-sm text-warm-600 dark:text-cool-400 mb-4">请选择目标玩家</p>
                
                <!-- 玩家选择网格 -->
                <div id="playersSelectGrid" class="grid grid-cols-4 gap-3 mb-5"></div>
                
                <div class="mb-4">
                    <label class="block text-sm mb-1" id="multiSelectReasonLabel">原因（可选）</label>
                    <textarea id="multiSelectReason" class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-warm-50 dark:bg-night-card-light h-24 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all small-textarea" placeholder="输入原因..."></textarea>
                </div>
            </div>
            
            <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                <button id="cancelMultiSelectBtn" class="px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">取消</button>
                <button id="confirmMultiSelectBtn" class="px-4 py-2 primary-btn rounded-md">保存</button>
            </div>
        </div>`;
                document.body.appendChild(modal);
                // 绑定按钮事件
                modal.querySelector('#closeMultiSelectBtn').addEventListener('click', closeMultiSelectModal);
                modal.querySelector('#cancelMultiSelectBtn').addEventListener('click', closeMultiSelectModal);
                modal.querySelector('#confirmMultiSelectBtn').addEventListener('click', handleMultiSelectConfirm);
            }
            // 保存当前操作数据
            gameData.multiSelect = {
                sourceId: sourceId,
                type: type,
                selectedIds: []
            };
            
            // 更新模态框标题和描述
            let title = "";
            let description = "";
            let reasonLabel = "";
            
            if (type === "vote") {
                title = `玩家 ${sourceId} 投票`;
                description = "请选择投票对象（可多选）";
                reasonLabel = "投票原因（可选）";
            } else if (type === "踩") {
                title = `玩家 ${sourceId} 踩`;
                description = "请选择要踩的玩家（可多选）";
                reasonLabel = "踩的原因（可选）";
            } else if (type === "保") {
                title = `玩家 ${sourceId} 保`;
                description = "请选择要保的玩家（可多选）";
                reasonLabel = "保的原因（可选）";
            } else if (type === "mentions") {
                title = `玩家 ${sourceId} 提及`;
                description = "请选择要提及的玩家（可多选）";
                reasonLabel = "提及的内容（可选）";
            } else if (type === "ignores") {
                title = `玩家 ${sourceId} 忽视`;
                description = "请选择要忽视的玩家（可多选）";
                reasonLabel = "忽视的原因（可选）";
            }
            
            document.getElementById('multiSelectTitle').textContent = title;
            document.getElementById('multiSelectDescription').textContent = description;
            document.getElementById('multiSelectReasonLabel').textContent = reasonLabel;
            document.getElementById('multiSelectReason').value = "";
            
            // 渲染玩家选择网格
            renderPlayersSelectGrid();
            
            // 显示模态框
            // 显示模态框
            modal = document.getElementById('multiSelectModal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            modal.style.display = '';
            
            // 移除缩放和透明度动画类，使其完全显示
            setTimeout(() => {
                const modalContent = document.getElementById('modalContent');
                if (modalContent) {
                    modalContent.classList.remove('scale-95', 'opacity-0');
                    modalContent.classList.add('scale-100', 'opacity-100');
                    // 阻止内容区点击冒泡至遮罩
                    modalContent.addEventListener('click', function(e) { e.stopPropagation(); });
                }
            }, 10);

            // 点击遮罩关闭
            modal.addEventListener('click', function(e) { if (e.target === modal) { closeMultiSelectModal(); } });
        }

        // 渲染玩家选择网格
        function renderPlayersSelectGrid() {
            const gridContainer = document.getElementById('playersSelectGrid');
            gridContainer.innerHTML = '';
            
            // 获取所有玩家（包括自己）
            gameData.players.forEach(player => {
                // 确定号码牌颜色
                const badgeColor = getPlayerBadgeStyle(player);
                
                // 如果玩家已出局，添加灰度
                const isDead = player.status === "dead" || player.status === "exposed";
                const deadClass = isDead ? "filter grayscale-65" : "";
                
                // 创建可选择的号码牌
                const badge = document.createElement('div');
                badge.className = `number-badge ${badgeColor} selectable-badge ${deadClass} justify-self-center`;
                badge.dataset.playerId = player.id;
                badge.textContent = player.id;
                
                // 如果是来源玩家，添加特殊标识
                if (player.id === gameData.multiSelect.sourceId) {
                    badge.innerHTML += '<span class="absolute -bottom-1 text-[8px]">自己</span>';
                }
                
                // 添加点击事件
                badge.addEventListener('click', () => {
                    togglePlayerSelection(player.id);
                });
                
                gridContainer.appendChild(badge);
            });
        }

        // 切换玩家选择状态
        function togglePlayerSelection(playerId) {
            const index = gameData.multiSelect.selectedIds.indexOf(playerId);
            const badge = document.querySelector(`.selectable-badge[data-player-id="${playerId}"]`);
            
            if (index === -1) {
                // 选中玩家
                gameData.multiSelect.selectedIds.push(playerId);
                badge.classList.add('selected');
            } else {
                // 取消选中
                gameData.multiSelect.selectedIds.splice(index, 1);
                badge.classList.remove('selected');
            }
        }

        // 处理批量选择确认
        function handleMultiSelectConfirm() {
            const { sourceId, type, selectedIds } = gameData.multiSelect;
            const reason = document.getElementById('multiSelectReason').value;
            
            // 验证是否选择了目标玩家
            if (selectedIds.length === 0) {
                alert(`请至少选择一个玩家`);
                return;
            }
            
            // 根据操作类型处理
            if (type === "vote") {
                // 在得票模式下，sourceId是被投票人，selectedIds是投票人列表
                handleVoteSelection(sourceId, selectedIds, reason);
            } else if (type === "踩" || type === "保") {
                handleInteractionSelection(sourceId, selectedIds, type, reason);
            } else if (type === "mentions" || type === "ignores") {
                handleMentionIgnoreSelection(sourceId, selectedIds, type, reason);
            }
            
            // 关闭模态框
            closeMultiSelectModal();
        }

        // 处理得票选择
        function handleVoteSelection(targetId, voterIds, reason) {
            // 获取当前阶段作为默认得票类型
            let voteType = "放逐";
            if (gameData.phase.current.includes("警长")) {
                voteType = "警长";
            } else if (gameData.phase.current.includes("PK")) {
                voteType = "PK";
            }
            
            // 为每个投票玩家创建得票记录
            voterIds.forEach(voterId => {
                const voteRecord = {
                    id: Date.now() + Math.floor(Math.random() * 1000), // 唯一ID
                    voterId: voterId,
                    targetId: targetId,
                    type: voteType,
                    note: reason,
                    phase: gameData.phase.current,
                    round: gameData.phase.round,
                    isDay: gameData.phase.day,
                    timestamp: new Date().toLocaleString()
                };
                
                // 保存到数据模型
                gameData.interactions.votes.push(voteRecord);
                
                // 更新被投票玩家的得票数
                const targetPlayer = gameData.players.find(p => p.id === targetId);
                if (targetPlayer) {
                    targetPlayer.voteCount++;
                }
            });
            
            // 更新投票记录列表和玩家卡片
            renderVoteRecords();
            renderPlayers();
            updateAnalysisData();
        }

        // 处理踩保选择
        function handleInteractionSelection(sourceId, targetIds, type, reason) {
            // 为每个目标玩家创建踩保记录
            targetIds.forEach(targetId => {
                const interactionRecord = {
                    id: Date.now() + Math.floor(Math.random() * 1000), // 唯一ID
                    sourceId: sourceId,
                    targetId: targetId,
                    type: type,
                    reason: reason,
                    phase: gameData.phase.current,
                    round: gameData.phase.round,
                    isDay: gameData.phase.day,
                    timestamp: new Date().toLocaleString()
                };
                
                // 保存到数据模型
                gameData.interactions[type].push(interactionRecord);
                
                // 更新目标玩家的踩/保次数
                const targetPlayer = gameData.players.find(p => p.id === targetId);
                if (targetPlayer) {
                    targetPlayer[`${type}Count`]++;
                }
            });
            
            // 更新踩保记录列表和玩家卡片
            renderInteractionRecords();
            renderPlayers();
            updateAnalysisData();
        }
        
        // 处理提及和忽视选择
        function handleMentionIgnoreSelection(sourceId, targetIds, type, reason) {
            // 为每个目标玩家创建提及/忽视记录
            targetIds.forEach(targetId => {
                const record = {
                    id: Date.now() + Math.floor(Math.random() * 1000), // 唯一ID
                    sourceId: sourceId,
                    targetId: targetId,
                    type: type,
                    reason: reason,
                    phase: gameData.phase.current,
                    round: gameData.phase.round,
                    isDay: gameData.phase.day,
                    timestamp: new Date().toLocaleString()
                };
                
                // 保存到数据模型
                gameData.interactions[type].push(record);
                
                // 更新目标玩家的提及/忽视次数
                const targetPlayer = gameData.players.find(p => p.id === targetId);
                if (targetPlayer) {
                    if (!targetPlayer[type + 'Count']) {
                        targetPlayer[type + 'Count'] = 0;
                    }
                    targetPlayer[type + 'Count']++;
                }
            });
            
            // 更新记录列表和玩家卡片
            renderInteractionRecords();
            renderPlayers();
            updateAnalysisData();
        }

        // 关闭批量选择模态框 - 简化版本，确保可靠性
        function closeMultiSelectModal() {
            try {
                const modal = document.getElementById('multiSelectModal');
                if (!modal) return;
                
                // 重置选中状态数据
                if (gameData.multiSelect) {
                    gameData.multiSelect.selectedIds = [];
                }
                
                // 尝试恢复内容初始动画类
                const modalContent = document.getElementById('modalContent');
                if (modalContent) {
                    modalContent.classList.remove('scale-100', 'opacity-100');
                    modalContent.classList.add('scale-95', 'opacity-0');
                }

                // 隐藏而不是移除，保留已绑定的事件监听，避免下一次打开失效
                modal.classList.add('hidden');
                modal.classList.remove('flex');
                modal.style.display = 'none';

            } catch (error) {
                console.error('关闭批量选择模态框时出错:', error);
                // 降级：隐藏模态框
                const modal = document.getElementById('multiSelectModal');
                if (modal) {
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');
                    modal.style.display = 'none';
                }
                if (gameData.multiSelect) {
                    gameData.multiSelect.selectedIds = [];
                }
            }
        }
        
        // 重置选中状态
        if (gameData.multiSelect) {
            gameData.multiSelect.selectedIds = [];
        }

        // 切换分区模式
        function switchPartitionMode(mode) {
            gameData.partition.mode = mode;
            
            // 更新按钮样式
            document.querySelectorAll('.partition-mode-btn').forEach(btn => {
                btn.classList.remove('bg-warm-500', 'dark:bg-cool-500', 'text-white');
                btn.classList.add('warm-btn');
            });
            
            document.querySelector(`.partition-mode-btn[data-mode="${mode}"]`).classList.remove('warm-btn');
            document.querySelector(`.partition-mode-btn[data-mode="${mode}"]`).classList.add('bg-warm-500', 'dark:bg-cool-500', 'text-white');
            
            // 重新渲染玩家分区
            renderPlayers();
        }

        // 切换警位状态 (警下→上警→退水→警下)
        function toggleBadgeStatus(playerId) {
            const player = gameData.players.find(p => p.id === playerId);
            if (!player) return;
            
            if (player.badgeStatus === "off") {
                player.badgeStatus = "on"; // 上警
            } else if (player.badgeStatus === "on") {
                player.badgeStatus = "quit"; // 退水
            } else {
                player.badgeStatus = "off"; // 警下
            }
            
            renderPlayers();
        }

        // 打开玩家详情模态框
        function openPlayerDetailModal(playerId) {
            const player = gameData.players.find(p => p.id === playerId);
            if (!player) return;
            
            // 若已存在残留的详情弹窗，先强制清理，避免重复ID和遮罩层拦截点击
            try { closeDetailModal(true); } catch (e) {}
            
            // 创建模态框容器
            const modalOverlay = document.createElement('div');
            modalOverlay.className = "fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4";
            modalOverlay.id = "playerDetailModal";
            
            // 创建模态框内容
            const modalContent = document.createElement('div');
            modalContent.className = "bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto transform transition-all duration-300 scale-95 opacity-0";
            
            modalContent.innerHTML = `
                <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-bold">玩家 ${player.id} 详情</h3>
                        <button class="close-modal btn-action">
                            <i class="fa fa-times warm-icon"></i>
                        </button>
                    </div>
                </div>
                
                <div class="p-5">
                    <!-- 身份设置 -->
                    <div class="mb-5">
                        <h4 class="text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">身份设置</h4>
                        
                        <!-- 阵营选择 -->
                        <div class="mb-3">
                            <label class="block text-sm mb-1">阵营</label>
                            <div class="flex gap-2">
                                <button class="camp-btn flex-1 py-2 border rounded-md ${player.role.camp === "unknown" ? "border-warm-300 bg-warm-100 dark:border-cool-700 dark:bg-cool-800" : ""}" data-camp="unknown">
                                    未知
                                </button>
                                <button class="camp-btn flex-1 py-2 border rounded-md ${player.role.camp === "town" ? "border-town-warm dark:border-town bg-town-warm/10 dark:bg-town/10 text-town-warm dark:text-town" : ""}" data-camp="town">
                                    神民
                                </button>
                                <button class="camp-btn flex-1 py-2 border rounded-md ${player.role.camp === "wolf" ? "border-wolf dark:border-wolf-cool bg-wolf/10 dark:bg-wolf-cool/10 text-wolf dark:text-wolf-cool" : ""}" data-camp="wolf">
                                    狼人
                                </button>
                                <button class="camp-btn flex-1 py-2 border rounded-md ${player.role.camp === "third" ? "border-third-warm dark:border-third bg-third-warm/10 dark:bg-third/10 text-third-warm dark:text-third" : ""}" data-camp="third">
                                    三方
                                </button>
                            </div>
                            
                            <!-- 具体身份选择（作为阵营的下级标签） -->
                            <div class="mt-3 pl-3 border-l-2 border-warm-200 dark:border-cool-700">
                                <label class="block text-sm mb-1">具体身份</label>
                                <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all role-select">
                                    <option value="">请选择身份</option>
                                    ${getRoleOptions(player.role.camp)}
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 状态设置 -->
                    <div class="mb-5">
                        <h4 class="text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">状态设置</h4>
                        <div class="flex gap-2">
                            <button class="status-btn flex-1 py-2 border rounded-md ${player.status === "alive" ? "border-green-500 bg-green-50 dark:border-green-900 dark:bg-green-900/30" : ""}" data-status="alive">
                                存活
                            </button>
                            <button class="status-btn flex-1 py-2 border rounded-md ${player.status === "dead" ? "border-warm-300 bg-warm-100 dark:border-cool-700 dark:bg-cool-800" : ""}" data-status="dead">
                                出局
                            </button>
                            <button class="status-btn flex-1 py-2 border rounded-md ${player.status === "exposed" ? "border-wolf dark:border-wolf-cool bg-wolf/10 dark:bg-wolf-cool/10 text-wolf dark:text-wolf-cool" : ""}" data-status="exposed">
                                自曝
                            </button>
                        </div>
                        
                        <!-- 出局方式 (状态为出局时显示) -->
                        <div class="mt-3 ${player.status === "dead" ? "" : "hidden"}" id="deathTypeContainer">
                            <label class="block text-sm mb-1">出局方式</label>
                            <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all death-type-select">
                                <option value="放逐">放逐</option>
                                <option value="被刀">被刀</option>
                                <option value="毒杀">毒杀</option>
                                <option value="枪杀">枪杀</option>
                                <option value="其他">其他</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- 特殊标记 -->
                    <div class="mb-5">
                        <h4 class="text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">特殊标记</h4>
                        <div class="flex flex-wrap gap-2">
                            <button class="special-tag-btn px-3 py-1 rounded-full text-sm ${player.specialTags.includes("金水") ? "bg-gold/20 text-gold border border-gold" : "warm-btn"}" data-tag="金水">
                                金水
                            </button>
                            <button class="special-tag-btn px-3 py-1 rounded-full text-sm ${player.specialTags.includes("银水") ? "bg-silver/20 text-silver border border-silver" : "warm-btn"}" data-tag="银水">
                                银水
                            </button>
                            <button class="special-tag-btn px-3 py-1 rounded-full text-sm ${player.specialTags.includes("铜水") ? "bg-copper/20 text-copper border border-copper" : "warm-btn"}" data-tag="铜水">
                                铜水
                            </button>
                            <button class="special-tag-btn px-3 py-1 rounded-full text-sm ${player.specialTags.includes("警徽流1") ? "bg-badge-warm/20 text-badge-warm border border-badge-warm dark:bg-badge-cool/20 dark:text-badge-cool dark:border-badge-cool" : "warm-btn"}" data-tag="警徽流1">
                                警徽流1
                            </button>
                            <button class="special-tag-btn px-3 py-1 rounded-full text-sm ${player.specialTags.includes("警徽流2") ? "bg-badge-warm/20 text-badge-warm border border-badge-warm dark:bg-badge-cool/20 dark:text-badge-cool dark:border-badge-cool" : "warm-btn"}" data-tag="警徽流2">
                                警徽流2
                            </button>
                            <button class="special-tag-btn px-3 py-1 rounded-full text-sm ${player.specialTags.includes("警徽流3") ? "bg-badge-warm/20 text-badge-warm border border-badge-warm dark:bg-badge-cool/20 dark:text-badge-cool dark:border-badge-cool" : "warm-btn"}" data-tag="警徽流3">
                                警徽流3
                            </button>
                        </div>
                    </div>
                    
                    <!-- 备注 -->
                    <div>
                        <h4 class="text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">备注信息</h4>
                        <textarea class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-warm-50 dark:bg-night-card-light h-24 player-notes focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all small-textarea" placeholder="输入备注信息...">${player.notes || ""}</textarea>
                    </div>
                </div>
                
                <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                    <button class="close-modal px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                        取消
                    </button>
                    <button class="save-player-detail px-4 py-2 primary-btn rounded-md">
                        保存
                    </button>
                </div>
            `;
            
            // 设置当前选中的身份和出局方式
            if (player.role.specific) {
                modalContent.querySelector(`.role-select option[value="${player.role.specific}"]`)?.setAttribute('selected', 'selected');
            }
            if (player.deathType) {
                modalContent.querySelector(`.death-type-select option[value="${player.deathType}"]`)?.setAttribute('selected', 'selected');
            }
            
            // 显示模态框并绑定玩家详情事件
            modalOverlay.appendChild(modalContent);
            document.body.appendChild(modalOverlay);
            
            // 点击遮罩关闭；阻止内容区点击冒泡
            modalOverlay.addEventListener('click', function(e){ if (e.target === modalOverlay) { closeDetailModal(); } });
            modalContent.addEventListener('click', function(e){ e.stopPropagation(); });
            
            // 添加动画效果
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 10);
            
            bindPlayerDetailEvents(playerId, modalContent, modalOverlay);
        }

        // 获取身份选项
        function getRoleOptions(camp) {
            let options = [];
            
            // 确保gameData.board.roles和相关角色列表存在
            if (!gameData.board || !gameData.board.roles) {
                console.warn('游戏板子配置或角色列表不存在');
                return '';
            }
            
            // 根据阵营添加对应身份
            if (camp === "town" || camp === "unknown") {
                if (gameData.board.roles.town) {
                    gameData.board.roles.town.forEach(role => {
                        options.push(`<option value="${role}">${role}</option>`);
                    });
                }
            }
            
            if (camp === "wolf" || camp === "unknown") {
                if (gameData.board.roles.wolves) {
                    gameData.board.roles.wolves.forEach(role => {
                        // 去重添加狼人身份
                        if (!options.includes(`<option value="${role}">${role}</option>`)) {
                            options.push(`<option value="${role}">${role}</option>`);
                        }
                    });
                }
            }
            
            // 添加三方阵营角色
            if (camp === "third" || camp === "unknown") {
                if (gameData.board.roles.third) {
                    gameData.board.roles.third.forEach(role => {
                        // 去重添加三方身份
                        if (!options.includes(`<option value="${role}">${role}</option>`)) {
                            options.push(`<option value="${role}">${role}</option>`);
                        }
                    });
                }
            }
            
            return options.join('');
        }

        // 绑定玩家详情模态框事件
        function bindPlayerDetailEvents(playerId, modalContent) {
            const player = gameData.players.find(p => p.id === playerId);
            if (!player) return;
            
            // 关闭模态框
            modalContent.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', closeDetailModal);
            });
            
            // 阵营选择
            modalContent.querySelectorAll('.camp-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    // 更新按钮样式
                    modalContent.querySelectorAll('.camp-btn').forEach(b => {
                        b.className = "camp-btn flex-1 py-2 border rounded-md border-warm-200 dark:border-cool-700";
                    });
                    
                    const camp = btn.dataset.camp;
                    if (camp === "town") {
                        btn.className = "camp-btn flex-1 py-2 border rounded-md border-town-warm dark:border-town bg-town-warm/10 dark:bg-town/10 text-town-warm dark:text-town";
                    } else if (camp === "wolf") {
                        btn.className = "camp-btn flex-1 py-2 border rounded-md border-wolf dark:border-wolf-cool bg-wolf/10 dark:bg-wolf-cool/10 text-wolf dark:text-wolf-cool";
                    } else if (camp === "third") {
                        btn.className = "camp-btn flex-1 py-2 border rounded-md border-third-warm dark:border-third bg-third-warm/10 dark:bg-third/10 text-third-warm dark:text-third";
                    } else {
                        btn.className = "camp-btn flex-1 py-2 border rounded-md border-warm-300 bg-warm-100 dark:border-cool-700 dark:bg-cool-800";
                    }
                    
                    // 更新身份选择下拉框
                    const roleSelect = modalContent.querySelector('.role-select');
                    roleSelect.innerHTML = `<option value="">请选择身份</option>${getRoleOptions(camp)}`;
                });
            });
            
            // 身份选择
            modalContent.querySelector('.role-select').addEventListener('change', (e) => {
                const selectedRole = e.target.value;
                if (selectedRole) {
                    // 根据选择的身份自动标记阵营
                    const camp = getCampByRole(selectedRole);
                    if (camp !== 'unknown') {
                        // 自动选择对应的阵营按钮
                        const campBtn = modalContent.querySelector(`.camp-btn[data-camp="${camp}"]`);
                        if (campBtn) {
                            // 更新按钮样式
                            modalContent.querySelectorAll('.camp-btn').forEach(b => {
                                b.className = "camp-btn flex-1 py-2 border rounded-md border-warm-200 dark:border-cool-700";
                            });
                            if (camp === "town") {
                                campBtn.className = "camp-btn flex-1 py-2 border rounded-md border-town-warm dark:border-town bg-town-warm/10 dark:bg-town/10 text-town-warm dark:text-town";
                            } else if (camp === "wolf") {
                                campBtn.className = "camp-btn flex-1 py-2 border rounded-md border-wolf dark:border-wolf-cool bg-wolf/10 dark:bg-wolf-cool/10 text-wolf dark:text-wolf-cool";
                            } else if (camp === "third") {
                                campBtn.className = "camp-btn flex-1 py-2 border rounded-md border-third-warm dark:border-third bg-third-warm/10 dark:bg-third/10 text-third-warm dark:text-third";
                            }
                        }
                    }
                }
            });
            modalContent.querySelectorAll('.status-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    // 更新按钮样式
                    modalContent.querySelectorAll('.status-btn').forEach(b => {
                        b.className = "status-btn flex-1 py-2 border rounded-md border-warm-200 dark:border-cool-700";
                    });
                    
                    const status = btn.dataset.status;
                    if (status === "alive") {
                        btn.className = "status-btn flex-1 py-2 border rounded-md border-green-500 bg-green-50 dark:border-green-900 dark:bg-green-900/30";
                    } else if (status === "dead") {
                        btn.className = "status-btn flex-1 py-2 border rounded-md border-warm-300 bg-warm-100 dark:border-cool-700 dark:bg-cool-800";
                    } else {
                        btn.className = "status-btn flex-1 py-2 border rounded-md border-wolf dark:border-wolf-cool bg-wolf/10 dark:bg-wolf-cool/10 text-wolf dark:text-wolf-cool";
                    }
                    
                    // 显示/隐藏出局方式选择
                    const deathContainer = modalContent.querySelector('#deathTypeContainer');
                    if (status === "dead") {
                        deathContainer.classList.remove('hidden');
                    } else {
                        deathContainer.classList.add('hidden');
                    }
                });
            });
            
            // 特殊标记选择
            modalContent.querySelectorAll('.special-tag-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const tag = btn.dataset.tag;
                    if (player.specialTags.includes(tag)) {
                        // 移除标记
                        player.specialTags = player.specialTags.filter(t => t !== tag);
                        btn.className = "special-tag-btn px-3 py-1 rounded-full text-sm warm-btn";
                    } else {
                        // 添加标记
                        player.specialTags.push(tag);
                        let tagClass = "";
                        if (tag === "金水") tagClass = "bg-gold/20 text-gold border border-gold";
                        if (tag === "银水") tagClass = "bg-silver/20 text-silver border border-silver";
                        if (tag === "铜水") tagClass = "bg-copper/20 text-copper border border-copper";
                        if (tag.includes("警徽流")) tagClass = "bg-badge-warm/20 text-badge-warm border border-badge-warm dark:bg-badge-cool/20 dark:text-badge-cool dark:border-badge-cool";
                        
                        btn.className = `special-tag-btn px-3 py-1 rounded-full text-sm ${tagClass}`;
                    }
                });
            });
            
            // 保存按钮
            modalContent.querySelector('.save-player-detail').addEventListener('click', () => {
                // 获取选中的阵营
                const selectedCamp = modalContent.querySelector('.camp-btn.bg-town-warm\\/10, .camp-btn.bg-wolf\\/10, .camp-btn.bg-third-warm\\/10, .camp-btn.bg-warm-100, .camp-btn.dark\\:bg-cool-800, .camp-btn.dark\\:bg-town\\/10, .camp-btn.dark\\:bg-wolf-cool\\/10, .camp-btn.dark\\:bg-third\\/10')?.dataset.camp || "unknown";
                
                // 获取选中的身份
                const selectedRole = modalContent.querySelector('.role-select').value;
                
                // 获取选中的状态
                const selectedStatus = modalContent.querySelector('.status-btn.bg-green-50, .status-btn.bg-warm-100, .status-btn.dark\\:bg-green-900\\/30, .status-btn.dark\\:bg-cool-800, .status-btn.bg-wolf\\/10, .status-btn.dark\\:bg-wolf-cool\\/10')?.dataset.status || "alive";
                
                // 获取出局方式
                const deathType = selectedStatus === "dead" ? modalContent.querySelector('.death-type-select').value : null;
                
                // 获取备注
                const notes = modalContent.querySelector('.player-notes').value;
                
                // 更新玩家数据
                player.role.camp = selectedCamp;
                player.role.specific = selectedRole || null;
                player.status = selectedStatus;
                player.deathType = deathType;
                player.notes = notes;
                
                // 如果是自曝，自动设置为狼人阵营
                if (selectedStatus === "exposed") {
                    player.role.camp = "wolf";
                }
                
                // 保存数据到本地存储
                saveGameDataToLocal();
                
                // 重新渲染玩家卡片
                renderPlayers();
                
                // 关闭模态框
                closeDetailModal();
            });
        }
        
        // 关闭详情模态框 - 确保所有弹窗能正常关闭且不影响其他功能
        function closeDetailModal(forceRemoveOnly) {
            try {
                // 首先尝试关闭标准模态框容器
                const modalContainer = document.getElementById('modalContainer');
                if (modalContainer && !forceRemoveOnly) {
                    // 添加淡出动画效果
                    modalContainer.classList.add('opacity-0');
                    modalContainer.style.transition = 'opacity 0.3s ease';
                    
                    // 延迟后清空内容并隐藏
                    setTimeout(() => {
                        try {
                            // 清空内容
                            modalContainer.innerHTML = '';
                            
                            // 隐藏模态框
                            modalContainer.classList.add('hidden');
                            modalContainer.classList.remove('flex', 'opacity-0');
                            modalContainer.style.transition = '';
                        } catch (innerError) {
                            console.error('清空模态框内容时出错:', innerError);
                            // 即使清空内容出错，也要确保模态框被隐藏
                            modalContainer.classList.add('hidden');
                            modalContainer.classList.remove('flex');
                        }
                    }, 300); // 与动画时间匹配
                }
                
                // 额外处理玩家详情模态框 - 只隐藏不删除
                const playerDetailModal = document.getElementById('playerDetailModal');
                if (playerDetailModal) {
                    // 直接从DOM移除，避免遮罩残留拦截点击与ID冲突
                    try { playerDetailModal.parentNode && playerDetailModal.parentNode.removeChild(playerDetailModal); } catch (_) {}
                }
                
                // 处理弹窗覆盖层 - 只隐藏特定的覆盖层，不影响其他元素
                // 使用转义斜杠的CSS选择器确保兼容性
                const specificOverlays = document.querySelectorAll('.modal-overlay, #modalContainer .bg-black\\/50');
                specificOverlays.forEach(overlay => {
                    try {
                        // 同样移除残留的异常覆盖层
                        overlay.parentNode && overlay.parentNode.removeChild(overlay);
                    } catch (e) {}
                });
                
            } catch (error) {
                console.error('关闭模态框时出错:', error);
                
                // 降级方案：只隐藏已知的模态框，不影响其他功能元素
                try {
                    document.querySelectorAll('#modalContainer, #playerDetailModal, .modal-overlay').forEach(el => {
                        if (el) {
                            // 优先移除，避免再次拦截点击
                            if (el.id === 'playerDetailModal' || el.classList.contains('modal-overlay')) {
                                el.parentNode && el.parentNode.removeChild(el);
                            } else {
                            el.classList.add('hidden');
                            el.classList.remove('flex');
                            }
                        }
                    });
                } catch (e) {}
            } finally {
                // 改进的页面状态恢复逻辑
                try {
                    // 移除body上可能限制交互的类和样式
                    const body = document.body;
                    if (body) {
                        body.classList.remove('overflow-hidden', 'fixed', 'pointer-events-none');
                        body.style.height = '';
                        body.style.width = '';
                        body.style.position = '';
                    }
                    
                    // 恢复文档滚动功能
                    document.documentElement.style.overflow = '';
                    document.documentElement.style.height = '';
                } catch (error) {
                    console.error('恢复页面状态时出错:', error);
                }
            }
        }
        

        
        // 检查是否为玩家详情按钮
        function isPlayerDetailButton(button) {
            return button && (button.id === 'playerDetailButton' || button.classList.contains('player-detail-button'));
        }
        
        // 统一的模态框显示函数
        function showModal(modalContent) {
            try {
                const modalContainer = document.getElementById('modalContainer');
                if (!modalContainer) return;
                
                // 确保模态框初始状态为隐藏和透明
                modalContainer.classList.add('opacity-0');
                modalContainer.classList.remove('scale-95', 'opacity-100');
                modalContainer.style.transition = 'opacity 0.3s ease';
                
                // 清空模态框并添加新内容
                modalContainer.innerHTML = '';
                modalContainer.appendChild(modalContent);
                
                // 显示模态框
                modalContainer.classList.remove('hidden');
                modalContainer.classList.add('flex');
                
                // 强制重排以确保动画效果
                void modalContainer.offsetWidth;
                
                // 添加淡入动画
                modalContainer.classList.remove('opacity-0');
                modalContainer.classList.add('opacity-100');
                
                // 为所有关闭按钮绑定事件
                modalContent.querySelectorAll('.close-modal').forEach(btn => {
                    btn.addEventListener('click', function(e){
                        e.preventDefault();
                        e.stopPropagation();
                        closeDetailModal();
                    });
                });
                // 兜底：内容区代理关闭（兼容点击图标等子元素）并阻止冒泡
                modalContent.addEventListener('click', function(e){
                    if (e.target && e.target.closest && e.target.closest('.close-modal')) {
                        e.preventDefault();
                        e.stopPropagation();
                        closeDetailModal();
                        return;
                    }
                    // 阻止内容区点击冒泡至遮罩，避免误判为背景点击
                    e.stopPropagation();
                });
                
                // 添加点击背景关闭模态框的功能（如果模态框内容没有阻止事件冒泡）
                const handleBackgroundClick = (e) => {
                    if (e.target === modalContainer) {
                        closeDetailModal();
                    }
                };
                
                modalContainer.addEventListener('click', handleBackgroundClick);
                
                // 添加键盘ESC关闭模态框的功能
                const handleEscKey = (e) => {
                    if (e.key === 'Escape') {
                        closeDetailModal();
                    }
                };
                
                document.addEventListener('keydown', handleEscKey);
                
                // 在模态框关闭时清理事件监听器
                const originalCloseDetailModal = window.closeDetailModal;
                window.closeDetailModal = function() {
                    originalCloseDetailModal.apply(this, arguments);
                    modalContainer.removeEventListener('click', handleBackgroundClick);
                    document.removeEventListener('keydown', handleEscKey);
                    window.closeDetailModal = originalCloseDetailModal;
                };
            } catch (error) {
                console.error('显示模态框时出错:', error);
                // 降级方案：直接显示模态框
                const modalContainer = document.getElementById('modalContainer');
                if (modalContainer) {
                    modalContainer.innerHTML = '';
                    modalContainer.appendChild(modalContent);
                    modalContainer.classList.remove('hidden');
                    modalContainer.classList.add('flex');
                    
                    // 为关闭按钮绑定事件
                    modalContent.querySelectorAll('.close-modal').forEach(btn => {
                        btn.addEventListener('click', function(e){
                            e.preventDefault();
                            e.stopPropagation();
                            closeDetailModal();
                        });
                    });
                }
            }
        }
        
        // 打开编辑发言记录模态框
        function openEditSpeechModal(speech) {
            // 创建发言记录模态框
            const modalContent = document.createElement('div');
            modalContent.className = "bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto";
            
            modalContent.innerHTML = `
                <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-bold">编辑玩家 ${speech.playerId} 发言记录</h3>
                        <button class="close-modal btn-action">
                            <i class="fa fa-times warm-icon"></i>
                        </button>
                    </div>
                </div>
                
                <div class="p-5">
                    <div class="mb-4">
                        <label class="block text-sm mb-1">发言类型</label>
                        <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all speech-type-select">
                            <option value="警上" ${speech.type === "警上" ? "selected" : ""}>警上发言</option>
                            <option value="警下" ${speech.type === "警下" ? "selected" : ""}>警下发言</option>
                            <option value="放逐" ${speech.type === "放逐" ? "selected" : ""}>放逐发言</option>
                            <option value="PK" ${speech.type === "PK" ? "selected" : ""}>PK发言</option>
                            <option value="遗言" ${speech.type === "遗言" ? "selected" : ""}>遗言</option>
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">标题（可选）</label>
                        <input type="text" class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all speech-title-input" 
                               placeholder="输入发言标题..." value="${speech.title || ''}">
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">发言内容 <span class="text-red-500">*</span></label>
                        <textarea class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card h-40 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all speech-content-input small-textarea" 
                                  placeholder="详细记录发言内容..." required>${speech.content}</textarea>
                    </div>
                    
                    <div class="text-sm text-warm-500 dark:text-cool-500 mb-4">
                        <p>发言阶段：${speech.phase}（第${speech.round}${speech.isDay ? '天' : '晚'}）</p>
                    </div>
                </div>
                
                <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                    <button class="close-modal px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                        取消
                    </button>
                    <button class="save-edit-speech-btn px-4 py-2 primary-btn rounded-md">
                        保存修改
                    </button>
                </div>
            `;
            
            // 使用统一的模态框显示函数
            showModal(modalContent);
            
            // 绑定保存编辑事件
            modalContent.querySelector('.save-edit-speech-btn').addEventListener('click', function() {
                try {
                    const speechType = modalContent.querySelector('.speech-type-select').value;
                    const title = modalContent.querySelector('.speech-title-input').value;
                    const content = modalContent.querySelector('.speech-content-input').value;
                    
                    // 验证内容是否为空
                    if (!content.trim()) {
                        alert('请输入发言内容');
                        return;
                    }
                    
                    // 更新发言记录
                    const speechIndex = gameData.interactions.speeches.findIndex(s => s.id === speech.id);
                    if (speechIndex !== -1) {
                        gameData.interactions.speeches[speechIndex] = {
                            ...gameData.interactions.speeches[speechIndex],
                            type: speechType,
                            title: title,
                            content: content
                        };
                        
                        // 更新发言记录列表
                        renderSpeechRecords();
                    }
                    
                    // 保存数据到本地存储
                    saveGameDataToLocal();
                } catch (error) {
                    console.error('保存发言记录时出错:', error);
                    alert('保存失败，请重试');
                } finally {
                    // 强制关闭模态框
                    closeDetailModal();
                }
            });
        }
        
        // 打开玩家选择弹窗
        function openPlayerSelectionPopup(action, parentModal, sourcePlayerId) {
            // 创建弹窗
            const popupOverlay = document.createElement('div');
            popupOverlay.className = 'fixed inset-0 bg-black/50 z-50 flex items-center justify-center animate-fade-in';
            
            const popup = document.createElement('div');
            popup.className = 'bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-xs p-4 max-h-[80vh] overflow-y-auto';
            
            // 弹窗标题
            let actionTitle = '';
            let actionColor = '';
            let actionIcon = '';
            let actionBgColor = '';
            let actionSelectedColor = '';
            
            switch(action) {
                case '踩':
                    actionTitle = '选择要踩的玩家';
                    actionColor = 'text-red-500';
                    actionIcon = 'fa-thumbs-down';
                    actionBgColor = 'bg-red-100 dark:bg-red-900/30';
                    actionSelectedColor = 'bg-red-500 text-white';
                    break;
                case '保':
                    actionTitle = '选择要保的玩家';
                    actionColor = 'text-green-500';
                    actionIcon = 'fa-thumbs-up';
                    actionBgColor = 'bg-green-100 dark:bg-green-900/30';
                    actionSelectedColor = 'bg-green-500 text-white';
                    break;
                case '提及':
                    actionTitle = '选择要提及的玩家';
                    actionColor = 'text-blue-500';
                    actionIcon = 'fa-comment';
                    actionBgColor = 'bg-blue-100 dark:bg-blue-900/30';
                    actionSelectedColor = 'bg-blue-500 text-white';
                    break;
                case '忽视':
                    actionTitle = '选择要忽视的玩家';
                    actionColor = 'text-gray-500';
                    actionIcon = 'fa-ban';
                    actionBgColor = 'bg-gray-100 dark:bg-gray-800';
                    actionSelectedColor = 'bg-gray-600 text-white';
                    break;
            }
            
            // 弹窗内容
            popup.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-bold ${actionColor}"><i class="fa ${actionIcon} mr-2"></i>${actionTitle}</h3>
                    <button class="close-popup btn-action">
                        <i class="fa fa-times warm-icon"></i>
                    </button>
                </div>
                
                <div class="grid grid-cols-5 gap-3 mb-4 player-badges-container">
                    ${gameData.players.map(p => {
                        const badgeColor = getPlayerBadgeStyle(p);
                        return `
                            <div class="selectable-player-badge ${badgeColor} ${actionBgColor} transition-all duration-200 hover:scale-110" data-player-id="${p.id}">
                                <span class="player-number">${p.id}</span>
                                <span class="selected-icon hidden">✓</span>
                            </div>
                        `;
                    }).join('')}
                </div>
                
                <div class="flex justify-end gap-2">
                    <button class="cancel-selection px-4 py-2 rounded-md border border-warm-200 dark:border-cool-700 hover:bg-warm-50 dark:hover:bg-cool-800 transition-colors">取消</button>
                    <button class="confirm-selection px-4 py-2 rounded-md ${actionSelectedColor} hover:opacity-90 transition-opacity">确定</button>
                </div>
            `;
            
            popupOverlay.appendChild(popup);
            document.body.appendChild(popupOverlay);
            
            // 为选择按钮添加样式
            popup.querySelectorAll('.selectable-player-badge').forEach(badge => {
                // 添加基础样式
                badge.classList.add('w-10', 'h-10', 'rounded-full', 'flex', 'items-center', 'justify-center', 'font-bold', 'relative', 'cursor-pointer');
            });
            
            // 绑定事件
            const selectedPlayers = new Set();
            
            // 选择玩家 - 增强勾选反馈
            popup.querySelectorAll('.selectable-player-badge').forEach(badge => {
                badge.addEventListener('click', () => {
                    const playerId = badge.dataset.playerId;
                    const selectedIcon = badge.querySelector('.selected-icon');
                    const playerNumber = badge.querySelector('.player-number');
                    
                    if (selectedPlayers.has(playerId)) {
                        // 取消选择
                        selectedPlayers.delete(playerId);
                        // 正确处理包含空格的类名
                        actionSelectedColor.split(' ').forEach(cls => badge.classList.remove(cls));
                        actionBgColor.split(' ').forEach(cls => badge.classList.add(cls));
                        if (selectedIcon) selectedIcon.classList.add('hidden');
                        if (playerNumber) playerNumber.classList.remove('opacity-30');
                        
                        // 添加取消动画效果
                        badge.classList.add('scale-95');
                        setTimeout(() => {
                            badge.classList.remove('scale-95');
                        }, 150);
                    } else {
                        // 选中
                        selectedPlayers.add(playerId);
                        // 正确处理包含空格的类名
                        actionBgColor.split(' ').forEach(cls => badge.classList.remove(cls));
                        actionSelectedColor.split(' ').forEach(cls => badge.classList.add(cls));
                        if (selectedIcon) selectedIcon.classList.remove('hidden');
                        if (playerNumber) playerNumber.classList.add('opacity-30');
                        
                        // 添加选中动画效果
                        badge.classList.add('scale-110');
                        setTimeout(() => {
                            badge.classList.remove('scale-110');
                        }, 150);
                    }
                });
            });
            
            // 关闭弹窗
            popup.querySelector('.close-popup').addEventListener('click', () => {
                try {
                    popupOverlay.classList.add('opacity-0');
                    setTimeout(() => {
                        document.body.removeChild(popupOverlay);
                    }, 200);
                } catch (e) {
                    document.body.removeChild(popupOverlay);
                }
            });
            
            // 取消选择
            popup.querySelector('.cancel-selection').addEventListener('click', () => {
                try {
                    popupOverlay.classList.add('opacity-0');
                    setTimeout(() => {
                        document.body.removeChild(popupOverlay);
                    }, 200);
                } catch (e) {
                    document.body.removeChild(popupOverlay);
                }
            });
            
            // 确认选择 - 优化数字排列并同步到互动记录
            popup.querySelector('.confirm-selection').addEventListener('click', () => {
                if (selectedPlayers.size > 0) {
                    const speechInput = parentModal.querySelector('.speech-content-input');
                    const currentContent = speechInput.value;
                    
                    // 将选中的玩家ID转为数组并排序，确保数字按顺序排列
                    const sortedPlayerIds = Array.from(selectedPlayers).map(id => parseInt(id)).sort((a, b) => a - b);
                    
                    // 添加操作标记和玩家号码牌，确保数字整齐排列
                    const playerBadges = sortedPlayerIds.map(id => 
                        `<span class="mini-player-badge" data-action="${action}" data-player-id="${id}">${id}</span>`
                    ).join(''); // 移除空格，使用CSS控制间距
                    
                    // 创建格式化的操作标签
                    const actionTag = `<div class="action-tag ${action}-tag" data-action="${action}"><span class="action-label">${action}：</span><span class="player-badges">${playerBadges}</span><span class="toggle-btn">▼</span></div>`;
                    
                    // 在文本框末尾添加内容，确保格式统一
                    const separator = currentContent && !currentContent.endsWith('\n') ? '\n\n' : '';
                    speechInput.value = currentContent + separator + actionTag;
                    
                    // 触发input事件，确保UI更新
                    speechInput.dispatchEvent(new Event('input', { bubbles: true }));
                    
                    // 自动滚动到底部
                    speechInput.scrollTop = speechInput.scrollHeight;

                    // 同步写入互动记录（踩/保/提及/忽视）并刷新分析
                    try {
                        if (['踩','保'].includes(action)) {
                            // 多目标同步
                            sortedPlayerIds.forEach(targetId => {
                                const interactionRecord = {
                                    id: Date.now() + Math.floor(Math.random() * 1000),
                                    sourceId: parseInt(sourcePlayerId),
                                    targetId: parseInt(targetId),
                                    type: action,
                                    reason: '(来自发言弹框快速操作)',
                                    phase: gameData.phase.current,
                                    round: gameData.phase.round,
                                    isDay: gameData.phase.day,
                                    timestamp: new Date().toLocaleString()
                                };
                                gameData.interactions[action].push(interactionRecord);
                            });
                            renderInteractionRecords();
                            updateAnalysisData();
                            saveGameDataToLocal();
                            // 渲染玩家以更新徽章颜色/状态（若有依赖）
                            renderPlayers();
                        } else if (['提及','忽视','mentions','ignores'].includes(action)) {
                            // 与现有 mention/ignore 记录结构一致
                            sortedPlayerIds.forEach(targetId => {
                                const record = {
                                    id: Date.now() + Math.floor(Math.random() * 1000),
                                    sourceId: parseInt(sourcePlayerId),
                                    targetId: parseInt(targetId),
                                    type: action,
                                    reason: '(来自发言弹框快速操作)',
                                    phase: gameData.phase.current,
                                    round: gameData.phase.round,
                                    isDay: gameData.phase.day,
                                    timestamp: new Date().toLocaleString()
                                };
                                // 统一落盘到 mentions/ignores 里（根据action名映射）
                                const key = (action === '提及' || action === 'mentions') ? 'mentions' : 'ignores';
                                gameData.interactions[key].push(record);
                            });
                            renderInteractionRecords();
                            updateAnalysisData();
                            saveGameDataToLocal();
                            renderPlayers();
                        }
                    } catch (syncErr) {
                        console.error('同步互动记录失败:', syncErr);
                    }
                }
                
                try {
                    popupOverlay.classList.add('opacity-0');
                    setTimeout(() => {
                        document.body.removeChild(popupOverlay);
                    }, 200);
                } catch (e) {
                    document.body.removeChild(popupOverlay);
                }
            });
        }
            
        // 打开编辑投票记录模态框
        function openEditVoteModal(vote) {
            // 创建投票编辑模态框
            const modalContent = document.createElement('div');
            modalContent.className = "bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto";
            
            // 生成玩家选择选项
            let playerOptions = '';
            gameData.players.forEach(player => {
                const isSelected = player.id === vote.targetId ? 'selected' : '';
                playerOptions += `<option value="${player.id}" ${isSelected}>玩家 ${player.id}</option>`;
            });
            
            modalContent.innerHTML = `
                <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-bold">编辑玩家 ${vote.targetId} 的被投票记录</h3>
                        <button class="close-modal btn-action">
                            <i class="fa fa-times warm-icon"></i>
                        </button>
                    </div>
                </div>
                
                <div class="p-5">
                    <div class="mb-4">
                        <label class="block text-sm mb-1">被投票类型</label>
                        <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all vote-type-select">
                            <option value="警长" ${vote.type === "警长" ? "selected" : ""}>警长选举</option>
                            <option value="放逐" ${vote.type === "放逐" ? "selected" : ""}>放逐投票</option>
                            <option value="PK" ${vote.type === "PK" ? "selected" : ""}>PK投票</option>
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">被投票人</label>
                        <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all vote-target-select">
                            ${playerOptions}
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">被投票原因（可选）</label>
                        <textarea class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card h-20 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all vote-note-input" 
                                  placeholder="输入投票原因...">${vote.note || ''}</textarea>
                    </div>
                    
                    <div class="text-sm text-warm-500 dark:text-cool-500 mb-4">
                        <p>被投票阶段：${vote.phase}（第${vote.round}${vote.isDay ? '天' : '晚'}）</p>
                    </div>
                </div>
                
                <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                    <button class="close-modal px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                        取消
                    </button>
                    <button class="save-edit-vote-btn px-4 py-2 primary-btn rounded-md">
                        保存修改
                    </button>
                </div>
            `;
            
            // 使用统一的模态框显示函数
            showModal(modalContent);
            
            // 绑定保存编辑事件
            modalContent.querySelector('.save-edit-vote-btn').addEventListener('click', function() {
                try {
                    const voteType = modalContent.querySelector('.vote-type-select').value;
                    const targetId = parseInt(modalContent.querySelector('.vote-target-select').value);
                    const note = modalContent.querySelector('.vote-note-input').value;
                    
                    // 先减少原目标玩家的得票数
                    const originalTargetPlayer = gameData.players.find(p => p.id === vote.targetId);
                    if (originalTargetPlayer && originalTargetPlayer.voteCount > 0) {
                        originalTargetPlayer.voteCount--;
                    }
                    
                    // 更新投票记录
                    const voteIndex = gameData.interactions.votes.findIndex(v => v.id === vote.id);
                    if (voteIndex !== -1) {
                        gameData.interactions.votes[voteIndex] = {
                            ...gameData.interactions.votes[voteIndex],
                            type: voteType,
                            targetId: targetId,
                            note: note
                        };
                        
                        // 增加新目标玩家的得票数
                        const newTargetPlayer = gameData.players.find(p => p.id === targetId);
                        if (newTargetPlayer) {
                            newTargetPlayer.voteCount++;
                        }
                        
                        // 更新投票记录列表和玩家卡片
                        renderVoteRecords();
                        renderPlayers();
                        updateAnalysisData();
                    }
                    
                    // 保存数据到本地存储
                    saveGameDataToLocal();
                } catch (error) {
                    console.error('保存投票记录时出错:', error);
                    alert('保存失败，请重试');
                } finally {
                    // 强制关闭模态框，直接调用与发言模块保持一致
                    closeDetailModal();
                }
            });
        }
        // 原代码此处的单独 } 可能是多余或错误的，因缺少上下文无法明确意图，故移除
        
        // 打开编辑踩保记录模态框
        function openEditInteractionModal(interaction, interactionType) {
            // 创建踩保编辑模态框
            const modalContent = document.createElement('div');
            modalContent.className = "bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto";
            
            // 生成玩家选择选项
            let playerOptions = '';
            gameData.players.forEach(player => {
                const isSelected = player.id === interaction.targetId ? 'selected' : '';
                playerOptions += `<option value="${player.id}" ${isSelected}>玩家 ${player.id}</option>`;
            });
            
            modalContent.innerHTML = `
                <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-bold">编辑玩家 ${interaction.sourceId} 的${interactionType}记录</h3>
                        <button class="close-modal btn-action">
                            <i class="fa fa-times warm-icon"></i>
                        </button>
                    </div>
                </div>
                
                <div class="p-5">
                    <div class="mb-4">
                        <label class="block text-sm mb-1">互动类型</label>
                        <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all interaction-type-select">
                            <option value="踩" ${interactionType === "踩" ? "selected" : ""}>踩</option>
                            <option value="保" ${interactionType === "保" ? "selected" : ""}>保</option>
                            <option value="mentions" ${interactionType === "mentions" ? "selected" : ""}>提及</option>
                            <option value="ignores" ${interactionType === "ignores" ? "selected" : ""}>忽视</option>
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">目标玩家</label>
                        <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all interaction-target-select">
                            ${playerOptions}
                        </select>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">原因（可选）</label>
                        <textarea class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card h-20 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all interaction-reason-input" 
                                  placeholder="输入${interactionType}的原因...">${interaction.reason || ''}</textarea>
                    </div>
                    
                    <div class="text-sm text-warm-500 dark:text-cool-500 mb-4">
                        <p>互动阶段：${interaction.phase}（第${interaction.round}${interaction.isDay ? '天' : '晚'}）</p>
                    </div>
                </div>
                
                <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                    <button class="close-modal px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                        取消
                    </button>
                    <button class="save-edit-interaction-btn px-4 py-2 primary-btn rounded-md">
                        保存修改
                    </button>
                </div>
            `;
            
            // 使用统一的模态框显示函数
            showModal(modalContent);
            
            // 绑定保存编辑事件
            modalContent.querySelector('.save-edit-interaction-btn').addEventListener('click', function() {
                try {
                    const newType = modalContent.querySelector('.interaction-type-select').value;
                    const targetId = parseInt(modalContent.querySelector('.interaction-target-select').value);
                    const reason = modalContent.querySelector('.interaction-reason-input').value;
                    
                    // 先减少原目标玩家的对应次数
                    if (interactionType !== newType) {
                        // 如果类型改变，需要在两个类型数组之间转移记录
                        // 1. 从原类型中删除
                        const oldIndex = gameData.interactions[interactionType].findIndex(i => i.id === interaction.id);
                        if (oldIndex !== -1) {
                            const originalTargetPlayer = gameData.players.find(p => p.id === interaction.targetId);
                            if (originalTargetPlayer && originalTargetPlayer[`${interactionType}Count`] > 0) {
                                originalTargetPlayer[`${interactionType}Count`]--;
                            }
                            gameData.interactions[interactionType].splice(oldIndex, 1);
                        }
                        
                        // 2. 添加到新类型
                        const updatedInteraction = {
                            ...interaction,
                            type: newType,
                            targetId: targetId,
                            reason: reason
                        };
                        gameData.interactions[newType].push(updatedInteraction);
                        
                        // 增加新目标玩家的对应次数
                        const newTargetPlayer = gameData.players.find(p => p.id === targetId);
                        if (newTargetPlayer) {
                            newTargetPlayer[`${newType}Count`]++;
                        }
                    } else {
                        // 如果类型不变，只更新记录
                        // 先减少原目标玩家的对应次数（如果目标改变）
                        if (targetId !== interaction.targetId) {
                            const originalTargetPlayer = gameData.players.find(p => p.id === interaction.targetId);
                            if (originalTargetPlayer && originalTargetPlayer[`${interactionType}Count`] > 0) {
                                originalTargetPlayer[`${interactionType}Count`]--;
                            }
                        }
                        
                        // 更新记录
                        const interactionIndex = gameData.interactions[interactionType].findIndex(i => i.id === interaction.id);
                        if (interactionIndex !== -1) {
                            gameData.interactions[interactionType][interactionIndex] = {
                                ...gameData.interactions[interactionType][interactionIndex],
                                targetId: targetId,
                                reason: reason
                            };
                            
                            // 增加新目标玩家的对应次数（如果目标改变）
                            if (targetId !== interaction.targetId) {
                                const newTargetPlayer = gameData.players.find(p => p.id === targetId);
                                if (newTargetPlayer) {
                                    newTargetPlayer[`${interactionType}Count`]++;
                                }
                            }
                        }
                    }
                    
                    // 更新踩保记录列表和玩家卡片
                    renderInteractionRecords();
                    renderPlayers();
                    updateAnalysisData();
                    
                    // 保存数据到本地存储
                    saveGameDataToLocal();
                } catch (error) {
                    console.error('保存踩保记录时出错:', error);
                    alert('保存失败，请重试');
                } finally {
                    // 强制关闭模态框，直接调用与发言模块保持一致
                    closeDetailModal();
                }
            });
        }

        // 打开发言记录模态框
        function openSpeechModal(playerId) {
            const player = gameData.players.find(p => p.id === playerId);
            if (!player) return;
            
            // 创建发言记录模态框
            const modalContent = document.createElement('div');
            modalContent.className = "bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-md max-h-[90vh] overflow-y-auto";
            
            // 获取当前阶段作为默认发言类型
            let defaultSpeechType = "警下";
            if (gameData.phase.current.includes("警上")) {
                defaultSpeechType = "警上";
            } else if (gameData.phase.current.includes("PK")) {
                defaultSpeechType = "PK";
            } else if (gameData.phase.current.includes("放逐")) {
                defaultSpeechType = "放逐";
            }
            
            modalContent.innerHTML = `
                <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-bold">玩家 ${playerId} 发言记录</h3>
                        <button class="close-modal btn-action">
                            <i class="fa fa-times warm-icon"></i>
                        </button>
                    </div>
                </div>
                
                <div class="p-5">
                    <div class="flex gap-2 mb-4">
                        <div class="flex-1">
                            <label class="block text-sm mb-1">发言类型</label>
                            <select class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all speech-type-select small-textarea">
                                <option value="警上" ${defaultSpeechType === "警上" ? "selected" : ""}>警上</option>
                                <option value="警下" ${defaultSpeechType === "警下" ? "selected" : ""}>警下</option>
                                <option value="放逐" ${defaultSpeechType === "放逐" ? "selected" : ""}>放逐</option>
                                <option value="PK" ${defaultSpeechType === "PK" ? "selected" : ""}>PK</option>
                                <option value="遗言" ${defaultSpeechType === "遗言" ? "selected" : ""}>遗言</option>
                            </select>
                        </div>
                        
                        <div class="flex-1">
                            <label class="block text-sm mb-1">标题（可选）</label>
                            <input type="text" class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all speech-title-input small-textarea" 
                                   placeholder="标题">
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label class="block text-sm mb-1">发言内容 <span class="text-red-500">*</span></label>
                        <div class="relative">
                            <textarea class="w-full p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card h-40 focus:ring-2 focus:ring-warm-400 dark:focus:ring-cool-400 focus:border-transparent outline-none transition-all speech-content-input small-textarea" 
                                  placeholder="发言内容..." required></textarea>
                            <div class="absolute bottom-2 right-2 flex gap-2">
                                <button class="quick-action-btn p-1 rounded-full bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400 hover:bg-red-200 dark:hover:bg-red-800/50" data-action="踩">
                                    <i class="fa fa-thumbs-down"></i>
                                </button>
                                <button class="quick-action-btn p-1 rounded-full bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400 hover:bg-green-200 dark:hover:bg-green-800/50" data-action="保">
                                    <i class="fa fa-thumbs-up"></i>
                                </button>
                                <button class="quick-action-btn p-1 rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800/50" data-action="提及">
                                    <i class="fa fa-comment"></i>
                                </button>
                                <button class="quick-action-btn p-1 rounded-full bg-gray-100 dark:bg-gray-700/30 text-gray-800 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-600/50" data-action="忽视">
                                    <i class="fa fa-ban"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="text-sm text-warm-500 dark:text-cool-500 mb-4">
                        <p>发言阶段：${gameData.phase.current}（第${gameData.phase.round}${gameData.phase.day ? '天' : '晚'}）</p>
                    </div>
                </div>
                
                <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                    <button class="close-modal px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                        取消
                    </button>
                    <button class="save-speech-btn px-4 py-2 primary-btn rounded-md">
                        保存发言
                    </button>
                </div>
            `;
            
            // 使用统一的模态框显示函数
            showModal(modalContent);
            
            // 绑定发言记录模态框事件
            bindSpeechModalEvents(playerId, modalContent);
        }

        // 绑定发言记录模态框事件
        function bindSpeechModalEvents(playerId, modalContent) {
            // 关闭模态框
            modalContent.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', closeDetailModal);
            });
            
            // 绑定快捷操作按钮
            modalContent.querySelectorAll('.quick-action-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const action = btn.dataset.action;
                    openPlayerSelectionPopup(action, modalContent, playerId);
                });
            });
            
            // 保存发言记录
            modalContent.querySelector('.save-speech-btn').addEventListener('click', function() {
                const speechType = modalContent.querySelector('.speech-type-select').value;
                const title = modalContent.querySelector('.speech-title-input').value;
                const content = modalContent.querySelector('.speech-content-input').value;
                
                // 验证内容是否为空
                if (!content.trim()) {
                    alert('请输入发言内容');
                    return;
                }
                
                // 创建发言记录对象
                const speechRecord = {
                    id: Date.now(), // 使用时间戳作为唯一ID
                    playerId: playerId,
                    type: speechType,
                    title: title,
                    content: content,
                    phase: gameData.phase.current,
                    round: gameData.phase.round,
                    isDay: gameData.phase.day,
                    timestamp: new Date().toLocaleString()
                };
                
                // 保存到数据模型
                gameData.interactions.speeches.push(speechRecord);
                
                // 更新发言记录列表
                renderSpeechRecords();
                
                // 保存数据到本地存储
                saveGameDataToLocal();
                
                // 关闭模态框
                closeDetailModal();
            });
        }

        // 渲染发言记录列表
        function renderSpeechRecords() {
            const speechesList = document.getElementById('speechesList');
            const filterPhase = document.getElementById('speechFilterPhase').value;
            const filterPlayer = document.getElementById('speechFilterPlayer').value;
            
            // 筛选发言记录
            let filteredSpeeches = [...gameData.interactions.speeches];
            
            if (filterPhase !== "all") {
                filteredSpeeches = filteredSpeeches.filter(speech => 
                    speech.type === filterPhase
                );
            }
            
            if (filterPlayer !== "all") {
                filteredSpeeches = filteredSpeeches.filter(speech => 
                    speech.playerId === parseInt(filterPlayer)
                );
            }
            
            // 按时间排序（最新的在前）
            filteredSpeeches.sort((a, b) => b.id - a.id);
            
            // 清空列表
            speechesList.innerHTML = '';
            
            // 如果没有记录
            if (filteredSpeeches.length === 0) {
                speechesList.innerHTML = `
                    <div class="text-warm-400 dark:text-cool-600 text-center py-8">
                        <i class="fa fa-comment-o text-2xl mb-2 warm-icon"></i>
                        <p>暂无符合条件的发言记录</p>
                    </div>
                `;
                return;
            }
            
            // 添加发言记录
            filteredSpeeches.forEach(speech => {
                const player = gameData.players.find(p => p.id === speech.playerId);
                const playerBadgeStyle = player ? getPlayerBadgeStyle(player) : "bg-warm-300 dark:bg-cool-700";
                
                const speechItem = document.createElement('div');
                speechItem.className = "speech-item bg-warm-50 dark:bg-night-card-light rounded-lg p-3 relative hover:shadow-warm dark:hover:shadow-cool transition-all duration-200";
                speechItem.dataset.speechId = speech.id;
                
                // 确定发言类型标签颜色
                let typeClass = "";
                if (speech.type === "警上") typeClass = "bg-warm-200 dark:bg-cool-700 text-warm-800 dark:text-cool-300";
                else if (speech.type === "警下") typeClass = "bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-400";
                else if (speech.type === "放逐") typeClass = "bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-400";
                else if (speech.type === "PK") typeClass = "bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-400";
                else if (speech.type === "遗言") typeClass = "bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400";
                
                speechItem.innerHTML = `
                    <div class="flex justify-between items-start mb-2">
                        <div class="flex items-center">
                            <div class="number-badge ${playerBadgeStyle} w-8 h-8 text-sm mr-2">
                                ${speech.playerId}
                            </div>
                            <div>
                                <h4 class="font-medium">${speech.title || `玩家${speech.playerId}的${speech.type}发言`}</h4>
                                <p class="text-xs text-warm-500 dark:text-cool-500">
                                    ${speech.phase}（第${speech.round}${speech.isDay ? '天' : '晚'}） · ${speech.timestamp}
                                </p>
                            </div>
                        </div>
                        <span class="px-2 py-0.5 rounded-full text-xs ${typeClass}">
                            ${speech.type}
                        </span>
                    </div>
                    
                    <div class="text-sm mb-2 whitespace-pre-line">${speech.content}</div>
                    
                    <div class="absolute top-2 right-2 flex gap-1">
                        <button class="edit-speech-btn text-warm-400 dark:text-cool-600 hover:text-blue-500 transition-colors">
                            <i class="fa fa-pencil"></i>
                        </button>
                        <button class="delete-speech-btn text-warm-400 dark:text-cool-600 hover:text-red-500 transition-colors">
                            <i class="fa fa-trash-o"></i>
                        </button>
                    </div>
                `;
                
                speechesList.appendChild(speechItem);
            });
            
            // 绑定删除发言记录事件 - 改为事件委托模式
            document.getElementById('speechesList').addEventListener('click', function(e) {
                if (e.target.closest('.delete-speech-btn')) {
                    e.stopPropagation();
                    const speechItem = e.target.closest('.speech-item');
                    const speechId = parseInt(speechItem.dataset.speechId);
                    deleteRecord('speech', speechId);
                }
            });
            
            // 绑定编辑发言记录事件
            document.querySelectorAll('.edit-speech-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const speechId = parseInt(btn.closest('.speech-item').dataset.speechId);
                    const speech = gameData.interactions.speeches.find(s => s.id === speechId);
                    if (speech) {
                        openEditSpeechModal(speech);
                    }
                });
            });
        }

        // 渲染投票记录列表 - 按被投票人分组的一对多展示
        function renderVoteRecords() {
            const votesList = document.getElementById('votesList');
            const filterPhase = document.getElementById('voteFilterPhase').value;
            const filterVoter = document.getElementById('voteFilterVoter').value;
            
            // 筛选投票记录
            let filteredVotes = [...gameData.interactions.votes];
            
            if (filterPhase !== "all") {
                filteredVotes = filteredVotes.filter(vote => 
                    vote.type === filterPhase
                );
            }
            
            // 按被投票人分组，合并同一个投票人对同一个目标的多次投票
            const votesByTarget = {};
            const voterTargetMap = {};
            
            filteredVotes.forEach(vote => {
                // 应用投票人筛选
                if (filterVoter !== "all" && vote.voterId !== parseInt(filterVoter)) {
                    return;
                }
                
                const targetId = vote.targetId;
                const voterId = vote.voterId;
                const mapKey = `${targetId}-${voterId}`;
                
                if (!votesByTarget[targetId]) {
                    votesByTarget[targetId] = [];
                    voterTargetMap[targetId] = {};
                }
                
                // 如果这个投票人已经对这个目标投过票，更新最新的投票
                if (voterTargetMap[targetId][voterId]) {
                    // 找到并移除旧的投票记录
                    const index = votesByTarget[targetId].findIndex(v => v.voterId === voterId);
                    if (index !== -1) {
                        votesByTarget[targetId].splice(index, 1);
                    }
                }
                
                // 添加新的投票记录
                votesByTarget[targetId].push(vote);
                voterTargetMap[targetId][voterId] = true;
            });
            
            // 按时间排序（最新的被投票人在前）
            const sortedTargetIds = Object.keys(votesByTarget).sort((a, b) => {
                const latestA = Math.max(...votesByTarget[a].map(v => v.id));
                const latestB = Math.max(...votesByTarget[b].map(v => v.id));
                return latestB - latestA;
            });
            
            // 清空列表
            votesList.innerHTML = '';
            
            // 如果没有记录
            if (sortedTargetIds.length === 0) {
                votesList.innerHTML = `
                    <div class="text-warm-400 dark:text-cool-600 text-center py-8">
                        <i class="fa fa-check-square-o text-2xl mb-2 warm-icon"></i>
                        <p>暂无符合条件的被投票记录</p>
                    </div>
                `;
                document.getElementById('votesPagination').classList.add('hidden');
                return;
            }
            
            // 清空所有投票记录组
            allVoteGroups = [];
            
            // 生成所有投票记录组并保存到数组
            sortedTargetIds.forEach(targetId => {
                const targetVotes = votesByTarget[targetId];
                const target = gameData.players.find(p => p.id === parseInt(targetId));
                const targetBadgeStyle = target ? getPlayerBadgeStyle(target) : "bg-warm-300 dark:bg-cool-700";
                
                // 创建被投票人组容器
                    const voteGroup = document.createElement('div');
                    voteGroup.className = "group-item";
                    voteGroup.dataset.targetId = targetId; // 添加data属性以便后续引用
                    
                    // 组标题（可点击展开/折叠）
                    const groupHeader = document.createElement('div');
                    groupHeader.className = "group-header";
                    groupHeader.innerHTML = `
                        <div class="flex items-center">
                            <div class="number-badge ${targetBadgeStyle} w-8 h-8 text-sm mr-2">
                                ${parseInt(targetId)} <!-- 确保显示数字类型 -->
                            </div>
                            <div>
                                <h4 class="font-medium">玩家 ${parseInt(targetId)} 的被投票记录</h4>
                                <p class="text-xs text-warm-500 dark:text-cool-500">共 ${targetVotes.length} 次被投票</p>
                            </div>
                        </div>
                        <i class="fa fa-chevron-down text-warm-400 dark:text-cool-600 transition-transform duration-300"></i>
                    `;
                
                // 组内容（包含该被投票人的所有被投票记录）
                const groupContent = document.createElement('div');
                groupContent.className = "group-content";
                
                // 按时间排序（最新的在前）
                targetVotes.sort((a, b) => b.id - a.id);
                
                // 按投票类型分组
                const votesByType = {};
                targetVotes.forEach(vote => {
                    if (!votesByType[vote.type]) {
                        votesByType[vote.type] = [];
                    }
                    votesByType[vote.type].push(vote);
                });
                
                // 遍历每个投票类型
                Object.keys(votesByType).forEach(voteType => {
                    const typeVotes = votesByType[voteType];
                    
                    // 确定投票类型标签颜色
                    let typeClass = "";
                    if (voteType === "警长") typeClass = "bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-400";
                    else if (voteType === "放逐") typeClass = "bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-400";
                    else if (voteType === "PK") typeClass = "bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-400";
                    
                    // 按投票人分组，只保留每个投票人的最新投票
                    const voterLatestVotes = {};
                    typeVotes.forEach(vote => {
                        const voterId = vote.voterId;
                        if (!voterLatestVotes[voterId] || vote.id > voterLatestVotes[voterId].id) {
                            voterLatestVotes[voterId] = vote;
                        }
                    });
                    
                    // 创建投票项
                    const voteItem = document.createElement('div');
                    voteItem.className = "sub-item";
                    
                    // 获取所有投票人的徽章HTML
                    const voterBadgesHtml = Object.values(voterLatestVotes).map(vote => {
                        const voter = gameData.players.find(p => p.id === vote.voterId);
                        const voterBadgeStyle = voter ? getPlayerBadgeStyle(voter) : "bg-warm-300 dark:bg-cool-700";
                        const isSelfVote = vote.voterId === parseInt(targetId);
                        
                        return `
                            <div class="number-badge ${voterBadgeStyle} w-7 h-7 text-xs mr-1 mb-1 relative" title="玩家 ${vote.voterId}${isSelfVote ? ' (自己)' : ''}">
                                ${vote.voterId}
                                ${isSelfVote ? '<span class="absolute -top-1 -right-1 text-xs text-red-500"><i class="fa fa-circle"></i></span>' : ''}
                            </div>
                        `;
                    }).join('');
                    
                    // 获取最新的投票记录用于显示时间和阶段信息
                    const latestVoteInType = typeVotes.reduce((latest, vote) => 
                        !latest || vote.id > latest.id ? vote : latest, null);
                    
                    // 统计有多少投票人
                    const voterCount = Object.keys(voterLatestVotes).length;
                    
                    // 设置数据属性用于编辑和删除
                    voteItem.dataset.voteIds = Object.values(voterLatestVotes).map(v => v.id).join(',');
                    
                    voteItem.innerHTML = `
                        <div class="flex justify-between items-start mb-1">
                            <div class="flex items-center">
                                <span class="px-2 py-0.5 rounded-full text-xs ${typeClass} mr-2">
                                    ${voteType}
                                </span>
                                <i class="fa fa-arrow-left text-warm-400 dark:text-cool-600 mx-1"></i>
                                <div class="flex flex-wrap ml-1">
                                    ${voterBadgesHtml}
                                </div>
                            </div>
                        </div>
                        
                        <p class="text-xs text-warm-500 dark:text-cool-500 mb-1">
                            ${latestVoteInType.phase}（第${latestVoteInType.round}${latestVoteInType.isDay ? '天' : '晚'}） · 共 ${voterCount} 人投票
                        </p>
                        
                        ${latestVoteInType.note ? `<div class="text-sm bg-warm-200 dark:bg-cool-700 p-2 rounded text-xs">${latestVoteInType.note}</div>` : ''}
                        
                        <div class="absolute right-3 top-2 flex gap-1">
                            <button class="view-votes-detail-btn text-warm-400 dark:text-cool-600 hover:text-blue-500 transition-colors" title="查看详情">
                                <i class="fa fa-info-circle"></i>
                            </button>
                        </div>
                    `;
                    
                    groupContent.appendChild(voteItem);
                });
                
                // 组合并添加到列表
                voteGroup.appendChild(groupHeader);
                voteGroup.appendChild(groupContent);
                
                // 添加展开/折叠事件
                groupHeader.addEventListener('click', () => {
                    groupContent.classList.toggle('open');
                    const icon = groupHeader.querySelector('i.fa-chevron-down');
                    if (groupContent.classList.contains('open')) {
                        icon.style.transform = 'rotate(180deg)';
                    } else {
                        icon.style.transform = 'rotate(0)';
                    }
                });
                
                // 默认展开最新的被投票人组
                if (sortedTargetIds.indexOf(targetId) === 0) {
                    groupContent.classList.add('open');
                    groupHeader.querySelector('i.fa-chevron-down').style.transform = 'rotate(180deg)';
                }
                
                // 保存到所有投票组数组
                allVoteGroups.push(voteGroup);
            });
            
            // 计算总页数
            totalVotePages = Math.ceil(allVoteGroups.length / votesPerPage);
            currentVotePage = 1; // 重置为第一页
            
            // 渲染第一页
            renderVoteRecordsPage(currentVotePage);
            
            // 绑定删除投票记录事件 - 改为事件委托模式
            document.getElementById('votesList').addEventListener('click', function(e) {
                if (e.target.closest('.delete-vote-btn')) {
                    e.stopPropagation();
                    const voteItem = e.target.closest('.sub-item');
                    const voteId = parseInt(voteItem.dataset.voteId);
                    deleteRecord('vote', voteId);
                }
            });
        }
        
        // 渲染特定页的投票记录
        function renderVoteRecordsPage(page) {
            const votesList = document.getElementById('votesList');
            const votesPagination = document.getElementById('votesPagination');
            const pageInfo = document.getElementById('pageInfo');
            const prevPageBtn = document.getElementById('prevPageBtn');
            const nextPageBtn = document.getElementById('nextPageBtn');
            
            // 清空列表
            votesList.innerHTML = '';
            
            // 计算当前页的记录范围
            const startIndex = (page - 1) * votesPerPage;
            const endIndex = Math.min(startIndex + votesPerPage, allVoteGroups.length);
            const currentPageGroups = allVoteGroups.slice(startIndex, endIndex);
            
            // 添加当前页的记录
            currentPageGroups.forEach(group => {
                votesList.appendChild(group.cloneNode(true)); // 克隆节点以避免重复绑定事件
            });
            
            // 更新分页信息
            pageInfo.textContent = `${page}/${totalVotePages}`;
            
            // 更新按钮状态
            prevPageBtn.disabled = page === 1;
            nextPageBtn.disabled = page === totalVotePages;
            
            // 显示分页控件
            votesPagination.classList.remove('hidden');
            
            // 重新绑定编辑投票记录事件
            document.querySelectorAll('.edit-vote-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    try {
                        e.stopPropagation(); // 防止触发父元素的展开/折叠事件
                        const voteItem = btn.closest('.sub-item');
                        const voteId = parseInt(voteItem.dataset.voteId);
                        
                        // 查找投票记录
                        const vote = gameData.interactions.votes.find(v => v.id === voteId);
                        if (vote) {
                            // 打开编辑模态框
                            openEditVoteModal(vote);
                        } else {
                            console.error('找不到投票记录:', voteId);
                            alert('投票记录不存在，请刷新页面');
                        }
                    } catch (error) {
                        console.error('打开编辑投票模态框失败:', error);
                        alert('打开编辑失败，请重试');
                        // 防止页面变模糊后无法操作
                        closeDetailModal();
                    }
                });
            });
        }

        // 渲染互动记录列表 - 支持踩、保、提及、忽视四种类型
        function renderInteractionRecords() {
            const interactionsList = document.getElementById('interactionsList');
            const filterType = document.getElementById('interactionFilterType').value;
            const filterSource = document.getElementById('interactionFilterSource').value;
            
            // 筛选互动记录
            let filteredInteractions = [];
            
            if (filterType === "all" || filterType === "踩") {
                filteredInteractions = [...filteredInteractions, ...gameData.interactions.踩];
            }
            
            if (filterType === "all" || filterType === "保") {
                filteredInteractions = [...filteredInteractions, ...gameData.interactions.保];
            }
            
            if (filterType === "all" || filterType === "mentions") {
                filteredInteractions = [...filteredInteractions, ...(gameData.interactions.mentions || [])];
            }
            
            if (filterType === "all" || filterType === "ignores") {
                filteredInteractions = [...filteredInteractions, ...(gameData.interactions.ignores || [])];
            }
            
            // 应用来源筛选
            if (filterSource !== "all") {
                filteredInteractions = filteredInteractions.filter(interaction => 
                    interaction.sourceId === parseInt(filterSource)
                );
            }
            
            // 按操作人分组
            const interactionsBySource = {};
            filteredInteractions.forEach(interaction => {
                if (!interactionsBySource[interaction.sourceId]) {
                    interactionsBySource[interaction.sourceId] = [];
                }
                interactionsBySource[interaction.sourceId].push(interaction);
            });
            
            // 按时间排序（最新的操作人在前）
            const sortedSourceIds = Object.keys(interactionsBySource).sort((a, b) => {
                const latestA = Math.max(...interactionsBySource[a].map(i => i.id));
                const latestB = Math.max(...interactionsBySource[b].map(i => i.id));
                return latestB - latestA;
            });
            
            // 清空列表
            interactionsList.innerHTML = '';
            
            // 如果没有记录
            if (sortedSourceIds.length === 0) {
                interactionsList.innerHTML = `
                    <div class="text-warm-400 dark:text-cool-600 text-center py-8">
                        <i class="fa fa-exchange text-2xl mb-2 warm-icon"></i>
                        <p>暂无符合条件的${filterType === "all" ? '踩保' : filterType}记录</p>
                    </div>
                `;
                return;
            }
            
            // 添加每个操作人的互动记录组
            sortedSourceIds.forEach(sourceId => {
                const sourceInteractions = interactionsBySource[sourceId];
                const source = gameData.players.find(p => p.id === parseInt(sourceId));
                const sourceBadgeStyle = source ? getPlayerBadgeStyle(source) : "bg-warm-300 dark:bg-cool-700";
                
                // 创建操作人组容器
                const interactionGroup = document.createElement('div');
                interactionGroup.className = "group-item";
                
                // 组标题（可点击展开/折叠）
                const groupHeader = document.createElement('div');
                groupHeader.className = "group-header";
                
                // 计算互动次数
                const 踩次数 = sourceInteractions.filter(i => i.type === "踩").length;
                const 保次数 = sourceInteractions.filter(i => i.type === "保").length;
                const 提及次数 = sourceInteractions.filter(i => i.type === "提及" || i.type === "mentions").length;
                const 忽视次数 = sourceInteractions.filter(i => i.type === "忽视" || i.type === "ignores").length;
                
                let interactionText = filterType === "all" ? '互动' : filterType;
                
                groupHeader.innerHTML = `
                    <div class="flex items-center">
                        <div class="number-badge ${sourceBadgeStyle} w-8 h-8 text-sm mr-2">
                            ${sourceId}
                        </div>
                        <div>
                            <h4 class="font-medium">玩家 ${sourceId} 的${interactionText}记录</h4>
                            <p class="text-xs text-warm-500 dark:text-cool-500">
                                共 ${sourceInteractions.length} 次${interactionText} 
                                ${filterType === "all" ? `（踩: ${踩次数} 次，保: ${保次数} 次，提及: ${提及次数} 次，忽视: ${忽视次数} 次）` : ''}
                            </p>
                        </div>
                    </div>
                    <i class="fa fa-chevron-down text-warm-400 dark:text-cool-600 transition-transform duration-300"></i>
                `;
                
                // 组内容（包含该操作人的所有互动记录）
                const groupContent = document.createElement('div');
                groupContent.className = "group-content";
                
                // 按时间排序（最新的在前）
                sourceInteractions.sort((a, b) => b.id - a.id);
                
                // 按互动类型和目标分组
                const interactionsByTypeAndTarget = {};
                sourceInteractions.forEach(interaction => {
                    const key = `${interaction.type}_${interaction.phase}_${interaction.round}_${interaction.isDay}`;
                    if (!interactionsByTypeAndTarget[key]) {
                        interactionsByTypeAndTarget[key] = {
                            type: interaction.type,
                            phase: interaction.phase,
                            round: interaction.round,
                            isDay: interaction.isDay,
                            timestamp: interaction.timestamp,
                            reason: interaction.reason,
                            targets: [],
                            latestId: interaction.id
                        };
                    }
                    
                    // 添加目标ID，如果不存在
                    if (!interactionsByTypeAndTarget[key].targets.includes(interaction.targetId)) {
                        interactionsByTypeAndTarget[key].targets.push(interaction.targetId);
                    }
                    
                    // 更新最新ID
                    if (interaction.id > interactionsByTypeAndTarget[key].latestId) {
                        interactionsByTypeAndTarget[key].latestId = interaction.id;
                        interactionsByTypeAndTarget[key].timestamp = interaction.timestamp;
                        interactionsByTypeAndTarget[key].reason = interaction.reason;
                    }
                });
                
                // 转换为数组并按最新ID排序
                const groupedInteractions = Object.values(interactionsByTypeAndTarget)
                    .sort((a, b) => b.latestId - a.latestId);
                
                // 添加互动记录项
                groupedInteractions.forEach(groupedInteraction => {
                    // 确定互动类型样式
                    let typeIcon = '';
                    let typeClass = '';
                    let typeText = groupedInteraction.type;
                    
                    if (groupedInteraction.type === "踩") {
                        typeIcon = '<i class="fa fa-thumbs-down text-red-500 mr-1"></i>';
                        typeClass = "bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400";
                    } else if (groupedInteraction.type === "保") {
                        typeIcon = '<i class="fa fa-thumbs-up text-green-500 mr-1"></i>';
                        typeClass = "bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400";
                    } else if (groupedInteraction.type === "提及" || groupedInteraction.type === "mentions") {
                        typeIcon = '<i class="fa fa-comment text-blue-500 mr-1"></i>';
                        typeClass = "bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400";
                        typeText = "提及";
                    } else if (groupedInteraction.type === "忽视" || groupedInteraction.type === "ignores") {
                        typeIcon = '<i class="fa fa-eye-slash text-gray-500 mr-1"></i>';
                        typeClass = "bg-gray-100 dark:bg-gray-800/30 text-gray-800 dark:text-gray-400";
                        typeText = "忽视";
                    }
                    
                    const interactionItem = document.createElement('div');
                    interactionItem.className = "sub-item";
                    interactionItem.dataset.interactionId = groupedInteraction.latestId;
                    
                    // 创建目标玩家徽章HTML
                    const targetBadgesHtml = groupedInteraction.targets.map(targetId => {
                        const target = gameData.players.find(p => p.id === targetId);
                        const targetBadgeStyle = target ? getPlayerBadgeStyle(target) : "bg-warm-300 dark:bg-cool-700";
                        return `<div class="number-badge ${targetBadgeStyle} w-7 h-7 text-xs mr-1 mb-1">${targetId}</div>`;
                    }).join('');
                    
                    interactionItem.innerHTML = `
                        <div class="flex justify-between items-start mb-1">
                            <div class="flex items-center flex-wrap">
                                ${typeIcon}
                                ${targetBadgesHtml}
                                <span class="px-2 py-0.5 rounded-full text-xs ${typeClass} ml-1">
                                    ${typeText}
                                </span>
                            </div>
                        </div>
                        
                        <p class="text-xs text-warm-500 dark:text-cool-500 mb-1">
                            ${groupedInteraction.phase}（第${groupedInteraction.round}${groupedInteraction.isDay ? '天' : '晚'}） · ${groupedInteraction.timestamp}
                        </p>
                        
                        ${groupedInteraction.reason ? `<div class="text-sm bg-warm-200 dark:bg-cool-700 p-2 rounded text-xs">${groupedInteraction.reason}</div>` : ''}
                        
                        <div class="absolute right-3 top-2 flex gap-1">
                            <button class="edit-interaction-btn text-warm-400 dark:text-cool-600 hover:text-blue-500 transition-colors">
                                <i class="fa fa-pencil"></i>
                            </button>
                            <button class="delete-interaction-btn text-warm-400 dark:text-cool-600 hover:text-red-500 transition-colors">
                                <i class="fa fa-trash-o"></i>
                            </button>
                        </div>
                    `;
                    
                    groupContent.appendChild(interactionItem);
                });
                
                // 组合并添加到列表
                interactionGroup.appendChild(groupHeader);
                interactionGroup.appendChild(groupContent);
                interactionsList.appendChild(interactionGroup);
                
                // 绑定展开/折叠事件
                groupHeader.addEventListener('click', () => {
                    groupContent.classList.toggle('open');
                    const icon = groupHeader.querySelector('i.fa-chevron-down');
                    if (groupContent.classList.contains('open')) {
                        icon.style.transform = 'rotate(180deg)';
                    } else {
                        icon.style.transform = 'rotate(0)';
                    }
                });
                
                // 默认展开最新的操作人组
                if (sortedSourceIds.indexOf(sourceId) === 0) {
                    groupContent.classList.add('open');
                    groupHeader.querySelector('i.fa-chevron-down').style.transform = 'rotate(180deg)';
                }
            });
            
            // 绑定删除互动记录事件 - 改为事件委托模式
            document.getElementById('interactionsList').addEventListener('click', function(e) {
                if (e.target.closest('.delete-interaction-btn')) {
                    e.stopPropagation();
                    const interactionItem = e.target.closest('.sub-item');
                    const interactionId = parseInt(interactionItem.dataset.interactionId);
                    deleteRecord('interaction', interactionId);
                }
            });
            
            // 绑定编辑互动记录事件
            document.querySelectorAll('.edit-interaction-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation(); // 防止触发父元素的展开/折叠事件
                    const interactionId = parseInt(btn.closest('.sub-item').dataset.interactionId);
                    
                    // 查找记录并编辑
                    let interaction = null;
                    let interactionType = '';
                    ['踩', '保', 'mentions', 'ignores'].forEach(type => {
                        if (gameData.interactions[type]) {
                            const found = gameData.interactions[type].find(i => i.id === interactionId);
                            if (found) {
                                interaction = found;
                                interactionType = type;
                            }
                        }
                    });
                    
                    if (interaction) {
                        openEditInteractionModal(interaction, interactionType);
                    }
                });
            });
        }

        // 通用删除记录函数
        function deleteRecord(type, id) {
            console.log(`删除${type}记录:`, id); // 调试日志
            let deleted = false;
            
            switch(type) {
                case 'speech':
                    showConfirmDialog(
                        '删除确认',
                        '确定要删除这条发言记录吗？',
                        () => {
                            // 从数据模型中删除
                            gameData.interactions.speeches = gameData.interactions.speeches.filter(
                                speech => speech.id !== id
                            );
                            deleted = true;
                            // 重新渲染
                            renderSpeechRecords();
                            showToast('发言记录已删除', 'success');
                        }
                    );
                    break;
                
                case 'vote':
                    const vote = gameData.interactions.votes.find(v => v.id === id);
                    if (vote) {
                        showConfirmDialog(
                            '删除确认',
                            '确定要删除这条得票记录吗？',
                            () => {
                                // 减少被投票玩家的得票数
                                const targetPlayer = gameData.players.find(p => p.id === vote.targetId);
                                if (targetPlayer && targetPlayer.voteCount > 0) {
                                    targetPlayer.voteCount--;
                                }
                                
                                // 从数据模型中删除
                                gameData.interactions.votes = gameData.interactions.votes.filter(
                                    v => v.id !== id
                                );
                                deleted = true;
                                
                                // 重新渲染
                                renderVoteRecords();
                                renderPlayers();
                                updateAnalysisData();
                                showToast('投票记录已删除', 'success');
                            }
                        );
                    }
                    break;
                
                case 'interaction':
                    // 查找记录并删除
                    ['踩', '保', 'mentions', 'ignores'].forEach(interactionType => {
                        if (gameData.interactions[interactionType]) {
                            const index = gameData.interactions[interactionType].findIndex(i => i.id === id);
                            if (index !== -1) {
                                const interaction = gameData.interactions[interactionType][index];
                                
                                let typeText = interactionType;
                                if (interactionType === 'mentions') typeText = '提及';
                                if (interactionType === 'ignores') typeText = '忽视';
                                
                                showConfirmDialog(
                                    '删除确认',
                                    `确定要删除这条${typeText}记录吗？`,
                                    () => {
                                        // 减少目标玩家的对应次数
                                        const targetPlayer = gameData.players.find(p => p.id === interaction.targetId);
                                        if (targetPlayer && targetPlayer[`${interactionType}Count`] > 0) {
                                            targetPlayer[`${interactionType}Count`]--;
                                        }
                                        
                                        // 从数据模型中删除
                                        gameData.interactions[interactionType].splice(index, 1);
                                        deleted = true;
                                        
                                        // 重新渲染
                                        renderInteractionRecords();
                                        renderPlayers();
                                        updateAnalysisData();
                                        showToast(`${typeText}记录已删除`, 'success');
                                    }
                                );
                            }
                        }
                    });
                    break;
            }
            
            // 如果删除成功，保存数据到本地存储
            if (deleted) {
                saveGameDataToLocal();
            }
        }

        // 更新所有筛选器的玩家选项
        function updateAllFilterPlayers() {
            // 生成玩家选项HTML
            let playerOptions = '<option value="all">所有玩家</option>';
            gameData.players.forEach(player => {
                playerOptions += `<option value="${player.id}">玩家 ${player.id}</option>`;
            });
            
            // 更新各个筛选器
            document.getElementById('speechFilterPlayer').innerHTML = playerOptions;
            document.getElementById('voteFilterVoter').innerHTML = playerOptions;
            document.getElementById('interactionFilterSource').innerHTML = playerOptions;
        }

        // 切换互动记录标签页
        function switchInteractionTab(tabName) {
            // 更新标签样式
            document.querySelectorAll('.interaction-tab').forEach(tab => {
                tab.classList.remove('text-warm-600', 'dark:text-cool-400', 'border-b-2', 'border-warm-500', 'dark:border-cool-500');
                tab.classList.add('text-warm-400', 'dark:text-cool-600');
            });
            
            document.querySelector(`.interaction-tab[data-tab="${tabName}"]`).classList.remove('text-warm-400', 'dark:text-cool-600');
            document.querySelector(`.interaction-tab[data-tab="${tabName}"]`).classList.add('text-warm-600', 'dark:text-cool-400', 'border-b-2', 'border-warm-500', 'dark:border-cool-500');
            
            // 更新内容显示
            document.querySelectorAll('.interaction-content').forEach(content => {
                content.classList.add('hidden');
            });
            
            document.getElementById(`${tabName}Tab`).classList.remove('hidden');
            
            // 重新渲染对应内容
            if (tabName === "speeches") {
                renderSpeechRecords();
            } else if (tabName === "votes") {
                renderVoteRecords();
            } else if (tabName === "interactions") {
                renderInteractionRecords();
            }
        }

        // 切换页面
        function switchPage(pageId) {
            // 隐藏所有页面
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            
            // 显示目标页面
            document.getElementById(pageId).classList.add('active');
            
            // 更新导航按钮样式
            document.querySelectorAll('nav button').forEach(btn => {
                btn.classList.remove('text-warm-600', 'dark:text-cool-400');
                btn.classList.add('text-warm-400', 'dark:text-cool-600');
            });
            
            if (pageId === "playersPage") {
                document.getElementById('homePageBtn').classList.remove('text-warm-400', 'dark:text-cool-600');
                document.getElementById('homePageBtn').classList.add('text-warm-600', 'dark:text-cool-400');
            } else if (pageId === "interactionPage") {
                document.getElementById('interactionPageBtn').classList.remove('text-warm-400', 'dark:text-cool-600');
                document.getElementById('interactionPageBtn').classList.add('text-warm-600', 'dark:text-cool-400');
                renderSpeechRecords(); // 确保互动页面内容正确显示
            } else if (pageId === "analysisPage") {
                document.getElementById('analysisNavBtn').classList.remove('text-warm-400', 'dark:text-cool-600');
                document.getElementById('analysisNavBtn').classList.add('text-warm-600', 'dark:text-cool-400');
                updateAnalysisData(); // 更新分析数据
            } else if (pageId === "notesPage") {
                document.getElementById('notesNavBtn').classList.remove('text-warm-400', 'dark:text-cool-600');
                document.getElementById('notesNavBtn').classList.add('text-warm-600', 'dark:text-cool-400');
            }
        }

        // 更新分析数据
        function updateAnalysisData() {
            // 投票统计
            const voteAnalysis = document.getElementById('voteAnalysis');
            if (gameData.interactions.votes.length === 0) {
                voteAnalysis.innerHTML = "暂无投票记录";
            } else {
                // 计算每个玩家的得票数
                const voteCounts = {};
                gameData.players.forEach(player => {
                    voteCounts[player.id] = 0;
                });
                
                gameData.interactions.votes.forEach(vote => {
                    if (voteCounts[vote.targetId] !== undefined) {
                        voteCounts[vote.targetId]++;
                    }
                });
                
                // 按得票数排序
                const sortedVotes = Object.entries(voteCounts)
                    .sort((a, b) => b[1] - a[1])
                    .filter(([id, count]) => count > 0);
                
                // 生成投票统计HTML
                let voteHtml = "<ul class='list-disc list-inside space-y-1'>";
                sortedVotes.forEach(([id, count]) => {
                    voteHtml += `<li>玩家 ${id}: ${count} 票</li>`;
                });
                
                // 按类型统计
                const votesByType = {
                    "警长": 0,
                    "放逐": 0,
                    "PK": 0
                };
                
                gameData.interactions.votes.forEach(vote => {
                    if (votesByType[vote.type] !== undefined) {
                        votesByType[vote.type]++;
                    }
                });
                
                voteHtml += "</ul><div class='mt-2 text-xs text-warm-600 dark:text-cool-400'>";
                Object.entries(votesByType).forEach(([type, count]) => {
                    if (count > 0) {
                        voteHtml += `${type}投票: ${count} 次 &nbsp;&nbsp;`;
                    }
                });
                voteHtml += "</div>";
                
                voteAnalysis.innerHTML = voteHtml;
            }
            
            // 踩保关系分析
            const interactionAnalysis = document.getElementById('interactionAnalysis');
            const totalInteractions = gameData.interactions.踩.length + gameData.interactions.保.length;
            
            if (totalInteractions === 0) {
                interactionAnalysis.innerHTML = "暂无踩保记录";
            } else {
                // 计算每个玩家被踩和被保的次数
                const interactionCounts = {};
                gameData.players.forEach(player => {
                    interactionCounts[player.id] = { 踩: 0, 保: 0 };
                });
                
                gameData.interactions.踩.forEach(interaction => {
                    if (interactionCounts[interaction.targetId] !== undefined) {
                        interactionCounts[interaction.targetId].踩++;
                    }
                });
                
                gameData.interactions.保.forEach(interaction => {
                    if (interactionCounts[interaction.targetId] !== undefined) {
                        interactionCounts[interaction.targetId].保++;
                    }
                });
                
                // 找出被踩最多和被保最多的玩家
                let most踩Player = null;
                let most踩Count = 0;
                let most保Player = null;
                let most保Count = 0;
                
                Object.entries(interactionCounts).forEach(([id, counts]) => {
                    if (counts.踩 > most踩Count) {
                        most踩Count = counts.踩;
                        most踩Player = id;
                    }
                    
                    if (counts.保 > most保Count) {
                        most保Count = counts.保;
                        most保Player = id;
                    }
                });
                
                // 生成分析HTML
                let interactionHtml = `<div class='space-y-2'>`;
                interactionHtml += `<p>总互动次数: ${totalInteractions} 次 (踩: ${gameData.interactions.踩.length} 次，保: ${gameData.interactions.保.length} 次)</p>`;
                
                if (most踩Player) {
                    interactionHtml += `<p>被踩最多: 玩家 ${most踩Player} (${most踩Count} 次)</p>`;
                }
                
                if (most保Player) {
                    interactionHtml += `<p>被保最多: 玩家 ${most保Player} (${most保Count} 次)</p>`;
                }
                
                interactionHtml += "</div>";
                interactionAnalysis.innerHTML = interactionHtml;
            }
            
            // 立场分析
            const positionAnalysis = document.getElementById('stanceAnalysis');
            const totalPositionData = gameData.interactions.votes.length + gameData.interactions.踩.length + gameData.interactions.保.length;
            
            if (totalPositionData === 0) {
                positionAnalysis.innerHTML = "暂无足够数据进行立场分析";
            } else {
                // 构建立场网络
                const positionNetwork = buildPositionNetwork();
                
                // 分配玩家立场
                const positions = assignPositions(positionNetwork);
                
                // 统计各立场的玩家
                const position1Players = [];
                const position2Players = [];
                const unknownPlayers = [];
                
                Object.entries(positions).forEach(([playerId, position]) => {
                    if (position === 1) {
                        position1Players.push(playerId);
                    } else if (position === 2) {
                        position2Players.push(playerId);
                    } else {
                        unknownPlayers.push(playerId);
                    }
                });
                
                // 生成立场分析HTML
                let positionHtml = `<div class='space-y-2'>`;
                
                if (position1Players.length > 0) {
                    positionHtml += `<p>立场1: ${position1Players.map(id => `玩家 ${id}`).join(', ')}</p>`;
                }
                
                if (position2Players.length > 0) {
                    positionHtml += `<p>立场2: ${position2Players.map(id => `玩家 ${id}`).join(', ')}</p>`;
                }
                
                if (unknownPlayers.length > 0) {
                    positionHtml += `<p>立场不明: ${unknownPlayers.map(id => `玩家 ${id}`).join(', ')}</p>`;
                }
                
                positionHtml += `</div>`;
                positionAnalysis.innerHTML = positionHtml;
            }
            
            // 关注度分析（视角推断）
            const attentionAnalysis = document.getElementById('attentionAnalysis');
            const totalAttentionData = gameData.interactions.mentions.length + gameData.interactions.ignores.length;
            
            if (totalAttentionData === 0) {
                attentionAnalysis.innerHTML = "暂无足够数据进行关注度分析";
            } else {
                // 计算每个玩家的提及和忽视次数（被提及/被忽视）
                const mentionCounts = {};
                const ignoreCounts = {};
                gameData.players.forEach(player => {
                    mentionCounts[player.id] = 0;
                    ignoreCounts[player.id] = 0;
                });
                
                gameData.interactions.mentions.forEach(mention => {
                    if (mentionCounts[mention.targetId] !== undefined) {
                        mentionCounts[mention.targetId]++;
                    }
                });
                
                gameData.interactions.ignores.forEach(ignore => {
                    if (ignoreCounts[ignore.targetId] !== undefined) {
                        ignoreCounts[ignore.targetId]++;
                    }
                });
                
                // 找出被提及最多和被忽视最多的玩家
                let mostMentionedPlayer = null;
                let mostMentionedCount = 0;
                let mostIgnoredPlayer = null;
                let mostIgnoredCount = 0;
                
                Object.entries(mentionCounts).forEach(([id, count]) => {
                    if (count > mostMentionedCount) {
                        mostMentionedCount = count;
                        mostMentionedPlayer = id;
                    }
                });
                
                Object.entries(ignoreCounts).forEach(([id, count]) => {
                    if (count > mostIgnoredCount) {
                        mostIgnoredCount = count;
                        mostIgnoredPlayer = id;
                    }
                });
                
                // 视角与阵营倾向推断（启发式）：
                // - 狼人阵营有视角：普遍会对同伴少提及且倾向忽视其他狼人（无法直接识别狼人，只给"有视角"提示）
                // - 忽视玩家较多者：可能有视角
                // - 被提及较多者：可能为神民阵营（被关注与讨论）
                const perspectiveCandidates = [];
                Object.keys(ignoreCounts).forEach(playerId => {
                    if (ignoreCounts[playerId] >= 3) {
                        perspectiveCandidates.push({ id: playerId, ignores: ignoreCounts[playerId] });
                    }
                });
                
                // 生成关注度分析HTML
                let attentionHtml = `<div class='space-y-2'>`;
                attentionHtml += `<p>总关注度互动: ${totalAttentionData} 次 (提及: ${gameData.interactions.mentions.length} 次，忽视: ${gameData.interactions.ignores.length} 次)</p>`;
                
                if (mostMentionedPlayer) {
                    attentionHtml += `<p>被提及最多: 玩家 ${mostMentionedPlayer} (${mostMentionedCount} 次，可能为神民阵营)</p>`;
                }
                
                if (mostIgnoredPlayer) {
                    attentionHtml += `<p>被忽视最多: 玩家 ${mostIgnoredPlayer} (${mostIgnoredCount} 次，可能有视角)</p>`;
                }
                
                if (perspectiveCandidates.length > 0) {
                    attentionHtml += `<p>可能有视角的玩家: ${perspectiveCandidates.map(p=>`玩家 ${p.id}(忽视:${p.ignores})`).join(', ')}</p>`;
                }
                
                attentionHtml += "</div>";
                attentionAnalysis.innerHTML = attentionHtml;
            }
        }
        
        // 构建立场关系图（same/opp 约束）
        function buildPositionNetwork() {
            // 图结构：graph[playerId] = Array<{ id: number, rel: 1 | -1 }>
            const graph = {};
            const ensure = (id) => { if (!graph[id]) graph[id] = []; };

            gameData.players.forEach(player => ensure(player.id));

            // 投票数据：警长=同立场，放逐/PK=对立立场
            gameData.interactions.votes.forEach(vote => {
                const s = vote.sourceId, t = vote.targetId;
                if (!s || !t || s === t) return;
                ensure(s); ensure(t);
                    if (vote.type === "警长") {
                    graph[s].push({ id: t, rel: 1 });
                    graph[t].push({ id: s, rel: 1 });
                    } else if (vote.type === "放逐" || vote.type === "PK") {
                    graph[s].push({ id: t, rel: -1 });
                    graph[t].push({ id: s, rel: -1 });
                }
            });

            // 踩/保：踩=对立，保=同立场
            gameData.interactions.踩.forEach(rec => {
                const s = rec.sourceId, t = rec.targetId;
                if (!s || !t || s === t) return;
                ensure(s); ensure(t);
                graph[s].push({ id: t, rel: -1 });
                graph[t].push({ id: s, rel: -1 });
            });

            gameData.interactions.保.forEach(rec => {
                const s = rec.sourceId, t = rec.targetId;
                if (!s || !t || s === t) return;
                ensure(s); ensure(t);
                graph[s].push({ id: t, rel: 1 });
                graph[t].push({ id: s, rel: 1 });
            });

            return graph;
        }

        // 根据 same/opp 约束进行二分着色（冲突记为未知）
        function assignPositions(graph) {
            const positions = {}; // 1=立场1, 2=立场2, 0=未知
            const visited = new Set();
            const flip = (p) => (p === 1 ? 2 : 1);
            
            gameData.players.forEach(player => {
                const start = player.id;
                if (visited.has(start)) return;
                const queue = [{ id: start, pos: 1 }];
                visited.add(start);

                while (queue.length) {
                    const { id, pos } = queue.shift();
                    if (positions[id] && positions[id] !== pos) {
                        // 冲突，置未知
                        positions[id] = 0;
                    } else {
                        positions[id] = positions[id] || pos;
                    }
                    const neighbors = (graph[id] || []);
                    neighbors.forEach(({ id: nb, rel }) => {
                        const expected = rel === 1 ? pos : flip(pos);
                        if (!visited.has(nb)) {
                            visited.add(nb);
                            queue.push({ id: nb, pos: expected });
                        } else if (positions[nb] && positions[nb] !== expected) {
                            positions[nb] = 0; // 冲突，未知
                        }
                    });
                }
            });

            // 填补未赋值为未知
            gameData.players.forEach(p => { if (positions[p.id] == null) positions[p.id] = 0; });
            return positions;
        }

        // 切换日夜模式
        function toggleDayNightMode() {
            const html = document.documentElement;
            const isDark = html.classList.toggle('dark');
            
            // 更新图标
            const icon = document.querySelector('#dayNightModeBtn i');
            if (isDark) {
                icon.classList.remove('fa-sun-o');
                icon.classList.add('fa-moon-o');
            } else {
                icon.classList.remove('fa-moon-o');
                icon.classList.add('fa-sun-o');
            }
            
            // 更新玩家卡片颜色
            renderPlayers();
        }

        // 切换游戏阶段
        function changePhase(direction) {
            // 游戏阶段序列
            const dayPhases = ["警长竞选", "警上发言", "警长投票", "警下发言", "放逐投票", "放逐发言", "公布结果"];
            const nightPhases = ["夜晚行动", "公布死亡"];
            
            // 计算新阶段
            let newRound = gameData.phase.round;
            let newDay = gameData.phase.day;
            let phaseIndex;
            
            if (gameData.phase.day) {
                phaseIndex = dayPhases.indexOf(gameData.phase.current);
                if (direction === "next") {
                    phaseIndex++;
                    if (phaseIndex >= dayPhases.length) {
                        // 白天结束，进入夜晚
                        newDay = false;
                        phaseIndex = 0;
                    }
                } else {
                    phaseIndex--;
                    if (phaseIndex < 0) {
                        // 回到前一天晚上的最后阶段
                        newDay = false;
                        phaseIndex = nightPhases.length - 1;
                        newRound = Math.max(1, newRound - 1);
                    }
                }
            } else {
                phaseIndex = nightPhases.indexOf(gameData.phase.current);
                if (direction === "next") {
                    phaseIndex++;
                    if (phaseIndex >= nightPhases.length) {
                        // 夜晚结束，进入新的一天
                        newDay = true;
                        phaseIndex = 0;
                        newRound++;
                    }
                } else {
                    phaseIndex--;
                    if (phaseIndex < 0) {
                        // 回到前一天的最后阶段
                        newDay = true;
                        phaseIndex = dayPhases.length - 1;
                        newRound = Math.max(1, newRound - 1);
                    }
                }
            }
            
            // 更新阶段数据
            gameData.phase.round = newRound;
            gameData.phase.day = newDay;
            gameData.phase.current = newDay ? dayPhases[phaseIndex] : nightPhases[phaseIndex];
            
            // 更新UI显示
            document.getElementById('currentPhase').textContent = gameData.phase.current;
        }

        // 重置游戏
        function resetGame() {
            // 使用自定义确认对话框
            showConfirmDialog({
                title: '确认重置游戏',
                message: '确定要重置当前游戏吗？所有记录将被清空。',
                confirmText: '确定',
                cancelText: '取消',
                confirmCallback: () => {
                    // 重新初始化玩家
                    initPlayers(gameData.board.playerCount);
                    
                    // 重置游戏阶段
                    gameData.phase = {
                        current: "发言",
                        day: true,
                        round: 1,
                        hasSheriff: false,
                        sheriff: null
                    };
                    
                    // 清空互动记录
                    gameData.interactions = {
                        speeches: [],
                        votes: [],
                        踩: [],
                        保: [],
                        mentions: [],
                        ignores: []
                    };
                    
                    // 清空笔记
                    gameData.notes.global = "";
                    document.getElementById('globalNotes').value = "";
                    
                    // 更新UI
                    document.getElementById('currentPhase').textContent = gameData.phase.current;
                    renderPlayers();
                    renderSpeechRecords();
                    renderVoteRecords();
                    renderInteractionRecords();
                    updateAnalysisData();
                    
                    // 切换到玩家页面
                    switchPage('playersPage');
                    
                    // 保存数据到本地存储
                    saveGameDataToLocal();
                    
                    // 显示重置成功提示
                    showToast('游戏已重置');
                }
            });
        }

        // 保存笔记
        function saveNotes() {
            const notes = document.getElementById('globalNotes').value;
            gameData.notes.global = notes;
            
            // 保存数据到本地存储
            saveGameDataToLocal();
            
            // 显示保存成功提示
            showToast('笔记保存成功');
        }

        // 初始化应用
        function initApp() {
            // 初始化玩家
            initPlayers(gameData.board.playerCount);
            
            // 渲染玩家
            renderPlayers();
            
            // 初始化可折叠迷你号码牌功能
            initCollapsibleBadges();
            
            // 初始化页面事件监听
            initEventListeners();
        }

        // 初始化可折叠迷你号码牌功能
        function initCollapsibleBadges() {
            // 为所有迷你号码牌添加点击事件，实现折叠/展开功能
            document.addEventListener('click', function(e) {
                // 检查是否点击了动作标签（踩、保、提及、忽视）
                if (e.target.classList.contains('action-tag') || e.target.closest('.action-tag')) {
                    const actionTag = e.target.classList.contains('action-tag') ? e.target : e.target.closest('.action-tag');
                    if (actionTag) {
                        actionTag.classList.toggle('collapsed');
                    }
                }
                
                // 检查是否点击了迷你号码牌
                if (e.target.classList.contains('mini-player-number') || 
                    e.target.parentElement && e.target.parentElement.classList.contains('mini-player-number')) {
                    const badge = e.target.closest('.mini-player-badge');
                    if (badge) {
                        const actionTag = badge.closest('.action-tag');
                        if (actionTag) {
                            actionTag.classList.toggle('collapsed');
                        }
                    }
                }
            });
        }
        
        // 初始化事件监听 - 优化版
        function initEventListeners() {
            // 分区模式切换
            document.querySelectorAll('.partition-mode-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    switchPartitionMode(btn.dataset.mode);
                });
            });
            
            // 板子选择
            document.querySelectorAll('.board-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    e.preventDefault();
                    switchBoard(option);
                });
            });
            
            // 日夜模式切换
            document.getElementById('dayNightModeBtn').addEventListener('click', toggleDayNightMode);
            
            // 跳转到玩家页面
            document.getElementById('goToPlayersBtn').addEventListener('click', () => {
                switchPage('playersPage');
            });
            
            // 阶段切换
            document.getElementById('prevPhaseBtn').addEventListener('click', () => {
                changePhase("prev");
            });
            
            document.getElementById('nextPhaseBtn').addEventListener('click', () => {
                changePhase("next");
            });
            
            // 使用事件委托处理页面切换按钮 - 合并重复的事件监听器
            const pageButtons = {
                'homePageBtn': 'playersPage',
                'interactionPageBtn': 'interactionPage',
                'analysisPageBtn': 'analysisPage',
                'analysisNavBtn': 'analysisPage',
                'notesPageBtn': 'notesPage',
                'notesNavBtn': 'notesPage'
            };
            
            for (const [id, page] of Object.entries(pageButtons)) {
                const btn = document.getElementById(id);
                if (btn) {
                    btn.addEventListener('click', () => {
                        switchPage(page);
                    });
                }
            }
            
            // 互动记录标签切换
            document.querySelectorAll('.interaction-tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    switchInteractionTab(tab.dataset.tab);
                });
            });
            
            // 统一处理筛选器变化事件 - 合并重复的事件监听器
            const filterEventHandlers = {
                'speechFilterPhase': renderSpeechRecords,
                'speechFilterPlayer': renderSpeechRecords,
                'voteFilterPhase': renderVoteRecords,
                'voteFilterVoter': renderVoteRecords,
                'interactionFilterType': renderInteractionRecords,
                'interactionFilterSource': renderInteractionRecords
            };
            
            for (const [id, handler] of Object.entries(filterEventHandlers)) {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', handler);
                }
            }
            
            // 批量选择模态框按钮
            document.getElementById('closeMultiSelectBtn').addEventListener('click', closeMultiSelectModal);
            document.getElementById('cancelMultiSelectBtn').addEventListener('click', closeMultiSelectModal);
            document.getElementById('confirmMultiSelectBtn').addEventListener('click', handleMultiSelectConfirm);
            
            // 重置游戏
            document.getElementById('resetGameBtn').addEventListener('click', resetGame);
            
            // 保存笔记
            document.getElementById('saveNotesBtn').addEventListener('click', saveNotes);
            
            // 统计票型
            document.getElementById('countVotesBtn').addEventListener('click', countVotes);
            
            // 分页控件事件
            document.getElementById('prevPageBtn').addEventListener('click', function() {
                if (currentVotePage > 1) {
                    currentVotePage--;
                    renderVoteRecordsPage(currentVotePage);
                }
            });
            
            document.getElementById('nextPageBtn').addEventListener('click', function() {
                if (currentVotePage < totalVotePages) {
                    currentVotePage++;
                    renderVoteRecordsPage(currentVotePage);
                }
            });
        }

        // 自定义板子相关函数
        // 打开自定义板子模态框
        function openCustomBoardModal() {
            const modal = document.getElementById('customBoardModal');
            const modalContent = modal.querySelector('div:first-child');
            
            // 重置模态框内容
            document.getElementById('customPlayerCount').value = 12;
            updateRequiredRolesCount();
            clearAllRoles();
            
            // 显示模态框
            modal.classList.remove('hidden');
            modal.classList.add('flex');
            
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 10);
        }

        // 关闭自定义板子模态框
        function closeCustomBoardModal() {
            const modal = document.getElementById('customBoardModal');
            const modalContent = modal.querySelector('div:first-child');
            
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            
            setTimeout(() => {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
            }, 300);
        }

        // 更新需要的身份数量
        function updateRequiredRolesCount() {
            const playerCount = parseInt(document.getElementById('customPlayerCount').value);
            document.getElementById('requiredRolesCount').textContent = playerCount;
            updateTotalRolesCount();
        }

        // 更新当前的身份总数
        function updateTotalRolesCount() {
            const townRoles = document.querySelectorAll('#townRolesContainer .role-tag');
            const wolfRoles = document.querySelectorAll('#wolfRolesContainer .role-tag');
            const thirdRoles = document.querySelectorAll('#thirdRolesContainer .role-tag');
            
            const total = townRoles.length + wolfRoles.length + thirdRoles.length;
            document.getElementById('totalRolesCount').textContent = total;
        }

        // 清空所有身份牌
        function clearAllRoles() {
            document.getElementById('townRolesContainer').innerHTML = '';
            document.getElementById('wolfRolesContainer').innerHTML = '';
            document.getElementById('thirdRolesContainer').innerHTML = '';
            updateTotalRolesCount();
        }

        // 添加身份牌
        function addRole(camp) {
            let roleName = '';
            let roleColorClass = '';
            
            // 根据阵营设置默认身份名称和颜色
            if (camp === 'town') {
                const townRoles = document.querySelectorAll('#townRolesContainer .role-tag');
                roleName = `神民${townRoles.length + 1}`;
                roleColorClass = 'bg-town-warm/20 text-town-warm dark:bg-town/20 dark:text-town';
            } else if (camp === 'wolf') {
                const wolfRoles = document.querySelectorAll('#wolfRolesContainer .role-tag');
                roleName = `狼人${wolfRoles.length + 1}`;
                roleColorClass = 'bg-wolf/20 text-wolf dark:bg-wolf-cool/20 dark:text-wolf-cool';
            } else if (camp === 'third') {
                const thirdRoles = document.querySelectorAll('#thirdRolesContainer .role-tag');
                roleName = `三方${thirdRoles.length + 1}`;
                roleColorClass = 'bg-third-warm/20 text-third-warm dark:bg-third/20 dark:text-third';
            }
            
            addCustomRole(camp, roleName);
        }

        // 添加自定义身份牌
        function addCustomRole(camp, roleName) {
            const container = document.getElementById(`${camp}RolesContainer`);
            let roleColorClass = '';
            
            // 设置颜色类
            if (camp === 'town') {
                roleColorClass = 'bg-town-warm/20 text-town-warm dark:bg-town/20 dark:text-town';
            } else if (camp === 'wolf') {
                roleColorClass = 'bg-wolf/20 text-wolf dark:bg-wolf-cool/20 dark:text-wolf-cool';
            } else if (camp === 'third') {
                roleColorClass = 'bg-third-warm/20 text-third-warm dark:bg-third/20 dark:text-third';
            }
            
            // 创建身份标签
            const roleTag = document.createElement('div');
            roleTag.className = `role-tag flex items-center px-3 py-1 rounded-md text-sm ${roleColorClass}`;
            roleTag.innerHTML = `
                <span>${roleName}</span>
                <button class="remove-role-btn ml-2 text-xs hover:opacity-80" data-camp="${camp}">
                    <i class="fa fa-times"></i>
                </button>
            `;
            
            container.appendChild(roleTag);
            updateTotalRolesCount();
            
            // 绑定移除事件
            roleTag.querySelector('.remove-role-btn').addEventListener('click', function(e) {
                e.stopPropagation();
                roleTag.remove();
                updateTotalRolesCount();
            });
        }

        // 保存自定义板子
        function saveCustomBoard() {
            const playerCount = parseInt(document.getElementById('customPlayerCount').value);
            const townRoles = [];
            const wolfRoles = [];
            const thirdRoles = [];
            
            // 收集各阵营的身份牌
            document.querySelectorAll('#townRolesContainer .role-tag span').forEach(span => {
                townRoles.push(span.textContent);
            });
            
            document.querySelectorAll('#wolfRolesContainer .role-tag span').forEach(span => {
                wolfRoles.push(span.textContent);
            });
            
            document.querySelectorAll('#thirdRolesContainer .role-tag span').forEach(span => {
                thirdRoles.push(span.textContent);
            });
            
            // 验证身份总数是否等于玩家数量
            const totalRoles = townRoles.length + wolfRoles.length + thirdRoles.length;
            if (totalRoles !== playerCount) {
                alert(`身份总数(${totalRoles})必须等于玩家数量(${playerCount})`);
                return;
            }
            
            // 更新游戏板子配置
            gameData.board.name = `${playerCount}人自定义场`;
            gameData.board.playerCount = playerCount;
            gameData.board.roles = {
                town: townRoles,
                wolves: wolfRoles,
                third: thirdRoles
            };
            
            // 更新显示
            document.getElementById('boardName').textContent = `${playerCount}人自定义场`;
            document.querySelector('#boardSelectBtn span').textContent = playerCount;
            
            // 重置玩家数据
            resetPlayers();
            
            // 关闭模态框
            closeCustomBoardModal();
        }

        // 创建自定义身份
        function createCustomRole() {
            const roleName = document.getElementById('customRoleName').value.trim();
            const roleCamp = document.getElementById('customRoleCamp').value;
            
            if (!roleName) {
                alert('请输入身份名称');
                return;
            }
            
            // 检查是否已存在同名身份
            const allRoles = document.querySelectorAll('.role-tag span');
            for (let role of allRoles) {
                if (role.textContent === roleName) {
                    alert('该身份名称已存在');
                    return;
                }
            }
            
            addCustomRole(roleCamp, roleName);
            document.getElementById('customRoleName').value = '';
        }

        // 根据身份自动确定阵营
        function getCampByRole(roleName) {
            if (!roleName) return 'unknown';
            
            // 检查各阵营的角色列表
            if (gameData.board.roles.town.includes(roleName)) {
                return 'town';
            } else if (gameData.board.roles.wolves.includes(roleName)) {
                return 'wolf';
            } else if (gameData.board.roles.third && gameData.board.roles.third.includes(roleName)) {
                return 'third';
            }
            
            return 'unknown';
        }

        // 初始化自定义板子相关事件
        function initCustomBoardEvents() {
            // 打开自定义板子模态框
            document.querySelectorAll('.custom-board-option').forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    openCustomBoardModal();
                });
            });
            
            // 关闭自定义板子模态框
            document.querySelectorAll('#customBoardModal .close-modal').forEach(btn => {
                btn.addEventListener('click', closeCustomBoardModal);
            });
            
            // 玩家数量调整
            document.getElementById('decreasePlayerCount').addEventListener('click', function() {
                const input = document.getElementById('customPlayerCount');
                if (parseInt(input.value) > 4) {
                    input.value = parseInt(input.value) - 1;
                    updateRequiredRolesCount();
                }
            });
            
            document.getElementById('increasePlayerCount').addEventListener('click', function() {
                const input = document.getElementById('customPlayerCount');
                if (parseInt(input.value) < 20) {
                    input.value = parseInt(input.value) + 1;
                    updateRequiredRolesCount();
                }
            });
            
            document.getElementById('customPlayerCount').addEventListener('change', updateRequiredRolesCount);
            
            // 添加身份牌
            document.querySelectorAll('.add-role-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const camp = this.dataset.camp;
                    addRole(camp);
                });
            });
            
            // 创建自定义身份
            document.getElementById('createCustomRole').addEventListener('click', createCustomRole);
            
            // 保存自定义板子
            document.getElementById('saveCustomBoard').addEventListener('click', saveCustomBoard);
        }

        // 更新玩家详情保存逻辑，添加自动标记阵营功能
        function updatePlayerDetailsSaveLogic() {
            // 获取保存按钮
            const saveBtn = document.querySelector('#playerDetailModal button:last-child:not(.close-modal)');
            if (!saveBtn) return;
            
            // 保存原始事件处理函数
            const originalHandler = saveBtn.onclick;
            
            // 替换为新的事件处理函数
            saveBtn.onclick = function() {
                // 自动根据身份标记阵营
                const roleSelect = document.getElementById('playerRole');
                const selectedRole = roleSelect.value;
                if (selectedRole) {
                    const camp = getCampByRole(selectedRole);
                    if (camp !== 'unknown') {
                        const campBtn = document.querySelector(`#playerCamp .camp-btn[data-camp="${camp}"]`);
                        if (campBtn && !campBtn.classList.contains('selected')) {
                            // 先取消所有选中状态
                            document.querySelectorAll('#playerCamp .camp-btn').forEach(btn => {
                                btn.classList.remove('selected');
                            });
                            // 选中对应阵营
                            campBtn.classList.add('selected');
                        }
                    }
                }
                
                // 调用原始的保存逻辑
                if (typeof originalHandler === 'function') {
                    originalHandler.apply(this, arguments);
                }
            };
        }

        // 启动应用初始化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('[狼人杀笔记] 开始应用初始化');
            
            // 添加自定义板子模态框到页面
            const body = document.body;
            const customBoardModalHTML = `
                <!-- 自定义板子模态框 -->
                <div id="customBoardModal" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden">
                    <div class="bg-day-card dark:bg-night-card rounded-xl shadow-warm-lg dark:shadow-cool-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto transform transition-all duration-300 scale-95 opacity-0">
                        <div class="p-5 border-b border-warm-200 dark:border-cool-800">
                            <div class="flex justify-between items-center">
                                <h3 class="text-lg font-bold">自定义游戏板子</h3>
                                <button class="close-modal btn-action">
                                    <i class="fa fa-times warm-icon"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="p-5">
                            <!-- 总人数设置 -->
                            <div class="mb-5">
                                <label class="block text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">游戏人数</label>
                                <div class="flex items-center gap-3">
                                    <button id="decreasePlayerCount" class="px-3 py-1 rounded-md border border-warm-200 dark:border-cool-700 warm-btn">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                    <input type="number" id="customPlayerCount" min="4" max="20" value="12" class="w-20 p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card text-center">
                                    <button id="increasePlayerCount" class="px-3 py-1 rounded-md border border-warm-200 dark:border-cool-700 warm-btn">
                                        <i class="fa fa-plus"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- 身份牌设置 -->
                            <div class="mb-5">
                                <label class="block text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">身份牌设置</label>
                                
                                <!-- 神民阵营 -->
                                <div class="mb-4">
                                    <div class="flex justify-between items-center mb-2">
                                        <h4 class="text-sm font-medium">神民阵营</h4>
                                        <div class="flex gap-1">
                                            <button class="add-role-btn px-2 py-0.5 rounded-md text-xs bg-town-warm/20 text-town-warm dark:bg-town/20 dark:text-town" data-camp="town">
                                                <i class="fa fa-plus"></i> 添加
                                            </button>
                                        </div>
                                    </div>
                                    <div id="townRolesContainer" class="flex flex-wrap gap-2">
                                        <!-- 神民身份牌将动态生成 -->
                                    </div>
                                </div>

                                <!-- 狼人阵营 -->
                                <div class="mb-4">
                                    <div class="flex justify-between items-center mb-2">
                                        <h4 class="text-sm font-medium">狼人阵营</h4>
                                        <div class="flex gap-1">
                                            <button class="add-role-btn px-2 py-0.5 rounded-md text-xs bg-wolf/20 text-wolf dark:bg-wolf-cool/20 dark:text-wolf-cool" data-camp="wolf">
                                                <i class="fa fa-plus"></i> 添加
                                            </button>
                                        </div>
                                    </div>
                                    <div id="wolfRolesContainer" class="flex flex-wrap gap-2">
                                        <!-- 狼人身份牌将动态生成 -->
                                    </div>
                                </div>

                                <!-- 三方阵营 -->
                                <div class="mb-4">
                                    <div class="flex justify-between items-center mb-2">
                                        <h4 class="text-sm font-medium">三方阵营</h4>
                                        <div class="flex gap-1">
                                            <button class="add-role-btn px-2 py-0.5 rounded-md text-xs bg-third-warm/20 text-third-warm dark:bg-third/20 dark:text-third" data-camp="third">
                                                <i class="fa fa-plus"></i> 添加
                                            </button>
                                        </div>
                                    </div>
                                    <div id="thirdRolesContainer" class="flex flex-wrap gap-2">
                                        <!-- 三方身份牌将动态生成 -->
                                    </div>
                                </div>
                            </div>

                            <!-- 身份总数提示 -->
                            <div class="mb-5 p-3 bg-warm-50 dark:bg-cool-900/50 rounded-md">
                                <p class="text-sm text-warm-700 dark:text-cool-300">
                                    身份总数: <span id="totalRolesCount">0</span> / <span id="requiredRolesCount">12</span>
                                </p>
                            </div>

                            <!-- 自定身份输入 -->
                            <div class="mb-5">
                                <label class="block text-sm font-medium text-warm-500 dark:text-cool-500 mb-2">创建自定义身份</label>
                                <div class="flex gap-2">
                                    <input type="text" id="customRoleName" placeholder="输入身份名称" class="flex-1 p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card">
                                    <select id="customRoleCamp" class="p-2 border border-warm-200 dark:border-cool-700 rounded-md bg-day-card dark:bg-night-card">
                                        <option value="town">神民</option>
                                        <option value="wolf">狼人</option>
                                        <option value="third">三方</option>
                                    </select>
                                    <button id="createCustomRole" class="px-3 py-1 rounded-md primary-btn">
                                        创建
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="p-4 border-t border-warm-200 dark:border-cool-800 flex justify-end gap-3">
                            <button class="close-modal px-4 py-2 border border-warm-200 dark:border-cool-700 rounded-md warm-btn">
                                取消
                            </button>
                            <button id="saveCustomBoard" class="px-4 py-2 primary-btn rounded-md">
                                保存板子
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            // 添加模态框到body
            body.insertAdjacentHTML('beforeend', customBoardModalHTML);
            
            // 初始化应用
            initApp();
            
            // 初始化自定义板子事件
            initCustomBoardEvents();
            
            // 等待DOM完全加载后，更新玩家详情保存逻辑
            setTimeout(updatePlayerDetailsSaveLogic, 100);
        });
        
        // 统计票型功能
        function countVotes() {
            const currentPhase = gameData.phase.current;
            
            // 判断当前阶段
            if (currentPhase === '警长投票') {
                // 统计警长投票
                const voteCounts = {};
                // 初始化每个警上玩家的得票数为0
                gameData.players.forEach(player => {
                    // 仅警上玩家可当选警长
                    if (player.badgeStatus === 'on') {
                        voteCounts[player.id] = 0;
                    }
                });
                
                // 统计当前轮次的警长投票
                gameData.interactions.votes.forEach(vote => {
                    if (vote.type === '警长' && vote.round === gameData.phase.round) {
                        // 检查目标是否为警上玩家
                        if (voteCounts[vote.targetId] !== undefined) {
                            // 检查投票者是否为警长（虽然此时还没有警长，但为了代码完整性保留）
                            const voterPlayer = gameData.players.find(p => p.id === vote.voterId);
                            if (voterPlayer && voterPlayer.id === gameData.phase.sheriff) {
                                // 警长投票计为1.5票
                                voteCounts[vote.targetId] += 1.5;
                            } else {
                                // 普通玩家投票计为1票
                                voteCounts[vote.targetId] += 1;
                            }
                        }
                    }
                });
                
                // 找到得票最多的玩家
                let maxVotes = -1;
                let sheriffId = null;
                let tie = false;
                
                Object.entries(voteCounts).forEach(([id, count]) => {
                    if (count > maxVotes) {
                        maxVotes = count;
                        sheriffId = parseInt(id);
                        tie = false;
                    } else if (count === maxVotes && count > 0) {
                        tie = true;
                    }
                });
                
                // 如果有明确的得票最多者且不是平局
                if (sheriffId !== null && !tie && maxVotes > 0) {
                    // 设置警长
                    gameData.phase.hasSheriff = true;
                    gameData.phase.sheriff = sheriffId;
                    
                    // 给警长添加特殊标记（警徽）
                    const sheriffPlayer = gameData.players.find(p => p.id === sheriffId);
                    if (sheriffPlayer) {
                        // 确保警长状态为警上
                        sheriffPlayer.badgeStatus = 'on';
                        showToast(`玩家 ${sheriffId} 当选警长，获得警徽特权（投票计为1.5票）！`, 'success');
                    }
                    
                    // 自动进入下一阶段
                    changePhase("next");
                } else if (tie) {
                    showToast('投票结果平局，请重新投票！', 'info');
                } else {
                    showToast('暂无有效投票记录或没有警上玩家！', 'info');
                }
            } else if (currentPhase === '放逐投票') {
                // 统计放逐投票
                const voteCounts = {};
                // 初始化每个玩家的得票数为0
                gameData.players.forEach(player => {
                    voteCounts[player.id] = 0;
                });
                
                // 统计当前轮次的放逐投票，考虑警长投票权重
                gameData.interactions.votes.forEach(vote => {
                    if (vote.type === '放逐' && vote.round === gameData.phase.round) {
                        if (voteCounts[vote.targetId] !== undefined) {
                            // 检查投票者是否为警长
                            const voterPlayer = gameData.players.find(p => p.id === vote.voterId);
                            if (voterPlayer && voterPlayer.id === gameData.phase.sheriff) {
                                // 警长投票计为1.5票
                                voteCounts[vote.targetId] += 1.5;
                            } else {
                                // 普通玩家投票计为1票
                                voteCounts[vote.targetId] += 1;
                            }
                        }
                    }
                });
                
                // 找到得票最多的玩家
                let maxVotes = -1;
                let eliminatedId = null;
                let tie = false;
                
                Object.entries(voteCounts).forEach(([id, count]) => {
                    if (count > maxVotes) {
                        maxVotes = count;
                        eliminatedId = parseInt(id);
                        tie = false;
                    } else if (count === maxVotes && count > 0) {
                        tie = true;
                    }
                });
                
                // 如果有明确的得票最多者且不是平局
                if (eliminatedId !== null && !tie && maxVotes > 0) {
                    // 设置玩家出局状态
                    const eliminatedPlayer = gameData.players.find(p => p.id === eliminatedId);
                    if (eliminatedPlayer && eliminatedPlayer.status !== 'dead') {
                        eliminatedPlayer.status = 'dead';
                        eliminatedPlayer.deathType = '放逐';
                        showToast(`玩家 ${eliminatedId} 被放逐出局！`, 'success');
                    }

                    
                    // 自动进入下一阶段
                    changePhase("next");
                } else if (tie) {
                    showToast('投票结果平局，请重新投票！', 'info');
                } else {
                    showToast('暂无有效投票记录！', 'info');
                }
            } else {
                // 非投票阶段提示
                showToast(`当前阶段 ${currentPhase} 不支持统计票型功能！`, 'info');
            }
            
            // 重新渲染玩家和记录
            renderPlayers();
            renderVoteRecords();
            updateAnalysisData();
            
            // 保存数据到本地存储
            saveGameDataToLocal();
        }
    </script>
    

    
    <!-- 模态框容器 - 用于所有弹窗 -->
    <div id="modalContainer" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden"></div>

    </body></html>
